Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 1     
    1 /*
    2 ===============================================================================
    3 = UTILITY PROGRAMME FOR THE MINIMISATION OF BOOLEAN FUNCTIONS                 =
    4 = Written by R.C.LUCKHURST, September 1986                                    =
    5 = for final year BSc Electrical Engineering project, Bristol Polytechnic      =
    6 = Amended July 2024, see https://github.com/scriptituk/bool_min               =
    7 ===============================================================================
    8 */
    9 
   10 
   11 BSc_project: PROCEDURE OPTIONS (MAIN);
   12 
   13 %REPLACE $true BY '1'B;
   14 %REPLACE $false BY '0'B;
   15 %REPLACE $low BY 1;
   16 %REPLACE $high BY 2;
   17 %REPLACE $cost BY 3;
   18 %REPLACE $status BY 4;
   19 %REPLACE $redundant BY 1;
   20 %REPLACE $min_cost_redundant BY 2;
   21 %REPLACE $non_essential BY 3;
   22 %REPLACE $min_cost_essential BY 4;
   23 %REPLACE $essential BY 5;
   24 
   25 DECLARE SYSIN FILE STREAM INPUT ENVIRONMENT(INTERACTIVE);
   26 DECLARE SYSPRINT FILE STREAM OUTPUT PRINT ENVIRONMENT(INTERACTIVE);
   27 
   28 DECLARE (BINARY, BIT, CEIL, CHARACTER, COPY, DECIMAL, INDEX,
   29         LENGTH, LOG2, MIN, SUBSTR, TRANSLATE, VERIFY) BUILTIN,
   30 
   31         (num_minterms, num_dont_cares, num_terms, num_pis, num_ne_pis, num_inepi_sums,
   32         minterm (512), dont_care (512), term (1024), p_i (4,256), ne_pi (96),
   33         function_order, solution_cost) FIXED BINARY,
   34 
   35         (unique_solution, new_data,
   36         epi_covers_minterm (256), pi_covers_minterm (256,256)) BIT STATIC,
   37         inepi_sum (3000) BIT (96) ALIGNED,
   38 
   39         version CHARACTER (4) STATIC INITIAL ('V1.0'),
   40         continue CHARACTER (30) VARYING,
   41         pi_status (5) CHARACTER(30) VARYING STATIC INITIAL
   42         ('redundant','minimum-cost redundant','non-essential','minimum-cost essential','essential'),
      
   43         results_file FILE;
   44 
   45 
   46 /*
   47 ###############################################################################
   48 #                          UTILITY PROCEDURES                                 #
   49 ###############################################################################
   50 */
   51 
   52 
   53 /******************************************************************************
   54 * PROCEDURE equivalent: Returns logical equivalence between 2 integers        *
   55 *******************************************************************************/
   56 equivalent: PROCEDURE (x,y) RETURNS (FIXED BINARY);
   57      DECLARE (x,y) FIXED BINARY;
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 2     
   58      RETURN (x & y  |  ^ x & ^ y);
   59 END equivalent;
   60 
   61 
   62 /******************************************************************************
   63 * PROCEDURE trim: Returns integer with no leading spaces                      *
   64 *******************************************************************************/
   65 trim: PROCEDURE (value) RETURNS (CHARACTER (10) VARYING);
   66      DECLARE value FIXED BINARY;
   67      RETURN (SUBSTR(CHARACTER(value),VERIFY(CHARACTER(value),' ')));
   68 END trim;
   69 
   70 
   71 /******************************************************************************
   72 * PROCEDURE sort_data: Sorts minterms and don't cares into ascending order    *
   73 *           and deletes duplicate terms and terms out of range                *
   74 *******************************************************************************/
   75 sort_data: PROCEDURE;
   76      DECLARE (i, j, t) FIXED BINARY, (b, sorted, excess_terms, type (512)) BIT ALIGNED;
   77 
   78      /* first make an all-term list */
   79      DO t = 1 TO num_minterms;
   80           term(t) = minterm(t);
   81           type(t) = $true; /* ie minterm */
   82           END;
   83      DO t = 1 TO num_dont_cares;
   84           term(num_minterms + t) = dont_care(t);
   85           type(num_minterms + t) = $false; /* ie dont-care */
   86           END;
   87      num_terms = num_minterms + num_dont_cares;
   88 
   89      /* then sort into ascending order */
   90      excess_terms = $true;
   91      DO WHILE (excess_terms);
   92           excess_terms = $false; sorted = $false;
   93           DO i = num_terms TO 1 BY -1 WHILE (^ (sorted | excess_terms));
   94                /* erase terms which are out of range */
   95                IF term(i) < 0 | term(i) > 255 THEN DO;
   96                     term(i) = term(num_terms);
   97                     type(i) = type(num_terms);
   98                     num_terms = num_terms - 1;
   99                     excess_terms = $true;
  100                     END;
  101                sorted = $true;
  102                DO j = 1 TO i - 1 WHILE (^ excess_terms);
  103                     IF term(j) < 0 THEN sorted = $false;
  104                     /* if terms not in ascending order then swap them */
  105                     IF term(j) > term(j + 1) THEN DO;
  106                          t = term(j); term(j) = term(j + 1); term(j + 1) = t;
  107                          b = type(j); type(j) = type(j + 1); type(j + 1) = b;
  108                          sorted = $false;
  109                          END;
  110                     /* erase duplicate terms and give minterm priority */
  111                     ELSE IF term(j) = term(j + 1) THEN DO;
  112                          type(j) = (type(j) | type(j + 1));
  113                          term(j + 1) = term(num_terms);
  114                          type(j + 1) = type(num_terms);
  115                          num_terms = num_terms - 1;
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 3     
  116                          excess_terms = $true;
  117                          END;
  118                     END;
  119                END;
  120           END;
  121 
  122      /* now extract sorted terms back into ordered minterm & dont-care arrays */
  123      num_minterms = 0; num_dont_cares = 0;
  124      DO t = 1 TO num_terms;
  125           IF type(t) THEN DO;
  126                num_minterms = num_minterms + 1;
  127                minterm(num_minterms) = term(t);
  128                END;
  129           ELSE DO;
  130                num_dont_cares = num_dont_cares + 1;
  131                dont_care(num_dont_cares) = term(t);
  132                END;
  133           END;
  134 END sort_data;
  135 
  136 
  137 /*
  138 ###############################################################################
  139 #                           INPUT PROCEDURES                                  #
  140 ###############################################################################
  141 */
  142 
  143 
  144 /******************************************************************************
  145 * PROCEDURE menu_selection: Returns menu item requested: 1 - 5                *
  146 *******************************************************************************/
  147 menu_selection: PROCEDURE RETURNS (FIXED BINARY);
  148      DECLARE menu_item CHARACTER (30) VARYING, m FIXED BINARY;
  149      DO WHILE ($true);
  150           GET EDIT (menu_item) (A);
  151           IF VERIFY(menu_item, '12345') = 0 THEN DO;
  152                m = BINARY(menu_item);
  153                IF m >= 1 & m <= 5 THEN RETURN (m);
  154                END;
  155           END;
  156 END menu_selection;
  157 
  158 
  159 /******************************************************************************
  160 * PROCEDURE continue_prompt: Stops screen scrolling                           *
  161 *******************************************************************************/
  162 continue_prompt: PROCEDURE;
  163      PUT SKIP(2) LIST ('Press RETURN to continue -->');
  164      GET EDIT (continue) (A);
  165 END continue_prompt;
  166 
  167 
  168 /******************************************************************************
  169 * PROCEDURE enter_data: Used to enter minterms and don't cares                *
  170 *******************************************************************************/
  171 enter_data: PROCEDURE;
  172      DECLARE action CHARACTER (30) VARYING, deleted BIT ALIGNED, (i, t) FIXED BINARY;
  173 
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 4     
  174      get_input_list: PROCEDURE;
  175           DECLARE (upper, lower) FIXED BINARY,
  176                   input_item CHARACTER (30) VARYING,
  177                   illegal_entry BIT ALIGNED;
  178 
  179                num_terms = 0;
  180                illegal_entry = $false;
  181                PUT EDIT ('Enter values in the range 0 to 255 seperated by commas or blanks or return
      s. ',
  182                               'A range of values may be entered using a hyphen, e.g. 10-15. ',
  183                               'Type E after the last entry. ',
  184                               '--> ') (SKIP, A);
  185                DO WHILE ($true);
  186                     GET EDIT (input_item) (A);
  187                     IF TRANSLATE(input_item, 'E', 'e') = 'E' THEN RETURN;
  188                     ELSE IF VERIFY(input_item, '-0123456789') = 0 & INDEX(input_item, '-') ^= 1 THEN
       DO;
  189                          t = INDEX(input_item, '-');
  190                          IF t = 0 THEN DO;
  191                               IF num_terms <= 255 THEN DO;
  192                                    num_terms = num_terms + 1;
  193                                    term(num_terms) = BINARY(input_item);
  194                                    END;
  195                               END;
  196                          ELSE IF t <= 5 & LENGTH(input_item) - t < 5 THEN DO;
  197                               upper = BINARY(SUBSTR(input_item,t + 1)); IF upper > 255 THEN upper = 
      255;
  198                               lower = BINARY(SUBSTR(input_item, 1,t - 1)); IF lower > 255 THEN lower
       = 255;
  199                               IF lower > upper THEN DO; t = lower; lower = upper; upper = t; END;
  200                               DO t = lower TO upper WHILE (num_terms <= 255);
  201                                    num_terms = num_terms + 1;
  202                                    term(num_terms) = t;
  203                                    END;
  204                               END;
  205                          END;
  206                     ELSE illegal_entry = $true;
  207                     END;
  208                IF illegal_entry THEN PUT SKIP LIST ('Illegal entries have been disregarded. ');
  209           END get_input_list;
  210 
  211           DO WHILE ($true);
  212           PUT SKIP(3);
  213                CALL sort_data;
  214                CALL print_header_message(SYSPRINT);
  215                CALL print_input_data(SYSPRINT);
  216                PUT SKIP(3) EDIT ('C = Clear data',
  217                                  'AM = Add Minterms',
  218                                  'DM = Delete Minterms',
  219                                  'AD = Add Don''t cares',
  220                                  'DD = Delete Don''t cares',
  221                                  'E = End data entry',
  222                                  'Enter C/AM/DM/AD/DD/E --> ') (6(COLUMN(24),A,SKIP),SKIP,COLUMN(24)
      ,A);
  223                action = ' ';
  224                DO WHILE (VERIFY(action,'ACDEM') ^= 0);
  225                     GET EDIT (action) (A);
  226                     action = TRANSLATE(action, 'ACDEM', 'acdem');
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 5     
  227                     END;
  228                IF action = 'E' THEN RETURN;
  229                IF action = 'C' THEN DO;
  230                     num_minterms = 0; num_dont_cares = 0;
  231                     END;
  232                IF action = 'AM' | action = 'DM' | action = 'AD' | action = 'DD' THEN DO;
  233                     CALL get_input_list;
  234                     IF action = 'AM' THEN DO; /* add input list to minterms */
  235                          DO t = 1 TO num_terms;
  236                               minterm(num_minterms + t) = term(t);
  237                               END;
  238                          num_minterms = num_minterms + num_terms;
  239                     END;
  240                ELSE IF action = 'DM' THEN DO; /* make minterms contained in i/p list out of range fo
      r deletion */
  241                     DO t = 1 TO num_terms;
  242                          deleted = $false;
  243                          DO i = 1 TO num_minterms WHILE (^ deleted);
  244                               IF minterm(i) = term(t) THEN DO;
  245                                    minterm(i) = -1;
  246                                    deleted = $true;
  247                                    END;
  248                               END;
  249                          END;
  250                     END;
  251                ELSE IF action = 'AD' THEN DO; /* add input list to dont-cares */
  252                     DO t = 1 TO num_terms;
  253                          dont_care(num_dont_cares + t) = term(t);
  254                          END;
  255                     num_dont_cares = num_dont_cares + num_terms;
  256                     END;
  257                ELSE DO; /* make dont-cares contained in i/p list out of range for deletion when sort
      ed */
  258                     DO t = 1 TO num_terms;
  259                          deleted = $false;
  260                          DO i = 1 TO num_dont_cares WHILE (^ deleted);
  261                               IF dont_care(i) = term(t) THEN DO;
  262                                    dont_care(i) = -1;
  263                                    deleted = $true;
  264                                    END;
  265                               END;
  266                          END;
  267                     END;
  268                IF num_terms > 0 THEN new_data = $true;
  269                END;
  270           END;
  271 END enter_data;
  272 
  273 
  274 /*
  275 ###############################################################################
  276 #                       MINIMISATION PROCEDURES                               #
  277 ###############################################################################
  278 */
  279 
  280 
  281 /******************************************************************************
  282 * PROCEDURE prime_implicants: Generates complete list of PIs                  *
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 6     
  283 *******************************************************************************/
  284 prime_implicants: PROCEDURE;
  285 
  286 DECLARE (i, j, term_i, term_j, i_eqv_j, vertex, p, m) FIXED BINARY,
  287         (all_vertices_contained, covered) BIT ALIGNED;
  288 
  289      /* generate the prime implicants */
  290      num_pis = 0;
  291      DO i = 1 TO num_terms;
  292           DO j = num_terms TO i BY -1;
  293           /* choose the pair (i,j) */
  294           term_i = term(i); term_j = term(j);
  295           /* is (i,j) a cell? */
  296           IF (term_i & term_j) = term_i THEN DO;
  297                /* are all the vertices of (i,j) in the function? */
  298                i_eqv_j = equivalent(term_i, term_j);
  299                all_vertices_contained = $true; m = i + 1;
  300                DO vertex = term_i + 1 TO term_j - 1 WHILE (all_vertices_contained);
  301                     IF (i_eqv_j & vertex) = term_i THEN DO;
  302                          DO WHILE (term(m) < vertex); m = m + 1; END;
  303                          all_vertices_contained = (term(m) = vertex);
  304                          m = m + 1;
  305                          END;
  306                     END;
  307                IF all_vertices_contained THEN DO;
  308                     /* is (i,j) covered by an entry in the p.i. table? */
  309                     covered = $false;
  310                     IF num_pis ^= 0 THEN DO p = 1 TO num_pis WHILE (^ covered);
  311                          IF term_j <= p_i($high,p) THEN
  312                               IF (p_i($low,p) & term_i) = p_i($low,p) THEN
  313                                    covered = ((term_j & p_i($high,p)) = term_j);
  314                               END;
  315                     IF ^ covered THEN DO;
  316                          num_pis = num_pis + 1;
  317                          p_i($low,num_pis) = term_i;
  318                          p_i($high,num_pis) = term_j;
  319                          END;
  320                     END;
  321                END;
  322           END;
  323      END;
  324 
  325 END prime_implicants;
  326 
  327 
  328 /******************************************************************************
  329 * PROCEDURE p_i_chart: Makes a PI chart as a bit array                        *
  330 *******************************************************************************/
  331 p_i_chart: PROCEDURE;
  332      DECLARE (m, p) FIXED BINARY;
  333      /* generate the prime implicant chart */
  334      DO m = 1 TO num_minterms;
  335           DO p = 1 TO num_pis;
  336                pi_covers_minterm(p,m) = ((p_i($low,p) & minterm(m)) = p_i($low, p)
  337                                         & (minterm(m) & p_i($high,p)) = minterm(m));
  338                END;
  339           END;
  340 END p_i_chart;
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 7     
  341 
  342 
  343 /******************************************************************************
  344 * PROCEDURE p_i_status: Categorises PIs as essential/nonessential/redundant   *
  345 *******************************************************************************/
  346 p_i_status: PROCEDURE;
  347      DECLARE (m, p, epi, num_covers) FIXED BINARY;
  348 
  349      /* initialise all p.i. status to redundant */
  350      DO p = 1 TO num_pis; p_i($status,p) = $redundant; END;
  351      /* find essential p.i.s */
  352      DO m = 1 TO num_minterms;
  353           num_covers = 0;
  354           DO p = 1 TO num_pis;
  355                IF pi_covers_minterm(p,m) THEN DO;
  356                     epi = p;
  357                     num_covers = num_covers + 1;
  358                     END;
  359                END;
  360           IF num_covers = 1 THEN p_i($status, epi) = $essential;
  361           END;
  362      /* find minterms covered by essential p.i.s */
  363      num_covers = 0;
  364      DO m = 1 TO num_minterms;
  365           epi_covers_minterm(m) = $false;
  366           DO p = 1 TO num_pis WHILE (^ epi_covers_minterm(m));
  367                IF p_i($status,p) = $essential & pi_covers_minterm(p,m) THEN DO;
  368                     epi_covers_minterm(m) = $true;
  369                     num_covers = num_covers + 1;
  370                     END;
  371                END;
  372           END;
  373      /* determine whether 1 solution or more */
  374      unique_solution = (num_covers = num_minterms);
  375      /* find non-essential p.i.s */
  376      IF ^ unique_solution THEN DO;
  377           DO m = 1 TO num_minterms;
  378                IF ^ epi_covers_minterm(m) THEN DO p = 1 TO num_pis;
  379                     IF p_i($status,p) = $redundant & pi_covers_minterm(p,m) THEN p_i($status,p) = $n
      on_essential;
  380                     END;
  381                END;
  382           /* make a table of n.e.p.i. pointers */
  383           num_ne_pis = 0;
  384           DO p = 1 TO num_pis;
  385                IF p_i($status,p) = $non_essential THEN DO;
  386                     num_ne_pis = num_ne_pis + 1;   ne_pi(num_ne_pis) = p;
  387                     END;
  388                END;
  389           END;
  390 
  391 END p_i_status;
  392 
  393 
  394 /******************************************************************************
  395 * PROCEDURE p_i_cost: Calculates literal costs of PIs                         *
  396 *******************************************************************************/
  397 p_i_cost: PROCEDURE;
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 8     
  398      DECLARE (p, l, b, literals) FIXED BINARY;
  399      DO p = 1 TO num_pis;
  400           p_i($cost,p) = 0;  b = 1;
  401           literals = equivalent(p_i($low,p),p_i($high,p));
  402           DO l = 1 TO function_order;
  403                IF (b & literals) ^= 0 THEN p_i($cost,p) = p_i($cost,p) + 1;
  404                b = b + b;
  405                END;
  406           END;
  407 END p_i_cost;
  408 
  409 
  410 /******************************************************************************
  411 * PROCEDURE irredundand_nepi_sums: Performs algebraic conversion of           *
  412 *                                  nonessential PI product-of-sums to         *
  413 *                                  sum-of-products                            *
  414 *******************************************************************************/
  415 irredundant_nepi_sums: PROCEDURE;
  416      DECLARE (m, p, c, s, num_umin_nepis) FIXED BINARY,
  417              (b, umin_nepis(256)) BIT (96) ALIGNED,
  418              redundant_sums BIT ALIGNED;
  419 
  420      /* make an array of bit strings holding non-ess p.i. coverage of uncovered minterms */
  421      num_umin_nepis = 0;
  422      DO m = 1 TO num_minterms;
  423           IF ^ epi_covers_minterm(m) THEN DO;
  424               num_umin_nepis = num_umin_nepis + 1;
  425               umin_nepis(num_umin_nepis) = 0;
  426               b = BIT(0,95) || '1'B;
  427               DO p = 1 TO num_ne_pis;
  428                   IF pi_covers_minterm(ne_pi(p),m) THEN
  429                       umin_nepis(num_umin_nepis) = umin_nepis(num_umin_nepis) | b;
  430                   b = SUBSTR(b, 2);
  431                   END;
  432               END;
  433           END;
  434 
  435      /* first pass - i.n.e.p.i. sums are those covering 1st uncovered minterm */
  436      num_inepi_sums = 0;  b = BIT(0,95) || '1'B;
  437      DO p = 1 TO num_ne_pis;
  438           /* if 1st uncovered minterm is covered by this n.e.p.i. then ... */
  439           IF (umin_nepis(1) & b) ^= BIT(0,96) THEN DO;
  440               /* ... this sum is initially this n.e-p.i. */
  441               num_inepi_sums = num_inepi_sums + 1; inepi_sum(num_inepi_sums) = b;
  442               END;
  443           b = SUBSTR(b, 2);
  444           END;
  445 
  446      /* continue by repeatediy combining with n.e.p.i. terms of succeeding minterms algebraically */
      
  447      DO m = 2 TO num_umin_nepis;
  448           /* initialise cover counter and n.e.p.i. pointer */
  449           c = -1;  b = BIT(0,95) || '1'B;
  450           /* add each n.e.p.i. covering this minterm successively to each sum */
  451           DO p = 1 TO num_ne_pis;
  452               /* if this n.e.p.i. covers this minterm then ... */
  453               IF (umin_nepis(m) & b) ^= BIT(0, 96) THEN DO;
  454                   /* ... increment cover counter for this minterm ... */
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 9     
  455                   c = c + 1;
  456                   /* ... step through the sums for this cover ... */
  457                   DO s = c * num_inepi_sums + 1 TO (c + 1) * num_inepi_sums;
  458                       /* ... make a copy of current sums for next cover ... */
  459                       inepi_sum(s + num_inepi_sums) = inepi_sum(s);
  460                       /* ... add this cover to the sum */
  461                       inepi_sum(s) = inepi_sum(s) | b;
  462                       END;
  463                   END;
  464               b = SUBSTR(b, 2);
  465               END;
  466           /* calculate the new number of sums resulting from above */
  467           num_inepi_sums = (c + 1) * num_inepi_sums;
  468           /* some sums may cover others so minimise by nulling redundant sums */
  469           redundant_sums = $false;
  470           DO s = 1 TO num_inepi_sums;
  471               IF inepi_sum(s) ^= BIT(0,96) THEN DO c = 1 TO num_inepi_sums;
  472                   IF c ^= s & inepi_sum(c) ^= BIT(0,96) & (inepi_sum(s) & inepi_sum(c)) = inepi_sum(
      s) THEN DO;
  473                       inepi_sum(c) = BIT(0, 96);
  474                       redundant_sums = $true;
  475                       END;
  476                   END;
  477               END;
  478           /* remove redundant sums and calculate the new number of sums Tesulting */
  479           IF redundant_sums THEN CALL remove_redundant_sums;
  480           END;
  481 
  482 END irredundant_nepi_sums;
  483 
  484 
  485 /******************************************************************************
  486 * PROCEDURE minimum_cost_solution: Finds set of minimum literal cost          *
  487 *                                  nonessential PI sums                       *
  488 *******************************************************************************/
  489 minimum_cost_solution: PROCEDURE;
  490      DECLARE (s, min_cost, sum_cost(1000)) FIXED BINARY,
  491              redundant_sums BIT ALIGNED;
  492 
  493      /* make a table of irredundant n.e.p.i. literal costs */
  494      DO s = 1 TO num_inepi_sums;
  495           sum_cost(s) = nonessential_cost(s);
  496           END;
  497      /* find the minimum cost */
  498      min_cost = sum_cost(1);
  499      DO s = 2 TO num_inepi_sums;
  500           IF sum_cost(s) < min_cost THEN min_cost = sum_cost(s);
  501           END;
  502      /* remove all but minimum cost sums */
  503      DO s = 1 TO num_inepi_sums;
  504           IF sum_cost(s) > min_cost THEN DO;
  505                inepi_sum(s) = BIT(0, 96);
  506                redundant_sums = $true;
  507                END;
  508           END;
  509      IF redundant_sums THEN CALL remove_redundant_sums;
  510 
  511 END minimum_cost_solution;
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 10    
  512 
  513 
  514 /******************************************************************************
  515 * PROCEDURE ammend_p_i_status: Recategorises some nonessential PIs as         *
  516 *                              minimum cost essential/minimum cost redundant  *
  517 *******************************************************************************/
  518 ammend_p_i_status: PROCEDURE;
  519      DECLARE (ess_pis, red_pis, b) BIT (96) ALIGNED,
  520              s FIXED BINARY;
  521 
  522      /* find n.e.p.i.s common to each sum and those which have been removed */
  523      ess_pis = inepi_sum(1);
  524      red_pis = ^ ess_pis;
  525      DO s = 2 TO num_inepi_sums;
  526           ess_pis = ess_pis & inepi_sum(s);
  527           red_pis = red_pis & ^ inepi_sum(s);
  528           END;
  529      /* remove common n.e.p.i.s from the sums - these are minimum-cost essential */
  530      DO s = 1 TO num_inepi_sums;
  531           inepi_sum(s) = inepi_sum(s) & ^ ess_pis;
  532           END;
  533      /* ammend p.i. status table to show minimum-cost essential/redundant p.i.s */
  534      b = BIT(0,95) || '1'B;
  535      DO s = 1 TO num_ne_pis;
  536           IF (ess_pis & b) ^= BIT(0,96) THEN p_i($status,ne_pi(s)) = $min_cost_essential;
  537           ELSE IF (red_pis & b) ^= BIT(0,96) THEN p_i($status, ne_pi(s)) = $min_cost_redundant;
  538           b = SUBSTR(b,2);
  539           END;
  540 
  541 END ammend_p_i_status;
  542 
  543 
  544 /******************************************************************************
  545 * PROCEDURE remove_redundant_sums: Cleans up irredundant nonessential PI      *
  546 *                                  sum-of-products array                      *
  547 *******************************************************************************/
  548 remove_redundant_sums: PROCEDURE;
  549      DECLARE (i, j) FIXED BINARY, sum_moved BIT ALIGNED;
  550 
  551      DO i = 1 TO num_inepi_sums;
  552           IF inepi_sum(i) = BIT(0,96) THEN DO;
  553                sum_moved = $false;
  554                DO j = i + 1 TO num_inepi_sums WHILE (^ sum_moved);
  555                     IF inepi_sum(j) ^= BIT(0,96) THEN DO;
  556                          inepi_sum(i) = inepi_sum(j);  inepi_sum(j) = BIT(0, 96);
  557                          sum_moved = $true;
  558                          END;
  559                     END;
  560                IF ^ sum_moved THEN DO;
  561                     num_inepi_sums = i - 1;
  562                     RETURN;
  563                     END;
  564                END;
  565           END;
  566 
  567 END remove_redundant_sums;
  568 
  569 
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 11    
  570 /******************************************************************************
  571 * PROCEDURE essential_cost: Returns literal cost of all essential PIs         *
  572 *******************************************************************************/
  573 essential_cost: PROCEDURE RETURNS (FIXED BINARY);
  574      DECLARE (p, e_cost) FIXED BINARY;
  575      e_cost = 0;
  576      DO p = 1 TO num_pis;
  577           IF p_i($status,p) > $non_essential THEN e_cost = e_cost + p_i($cost,p);
  578           END;
  579      RETURN (e_cost);
  580 END essential_cost;
  581 
  582 
  583 /******************************************************************************
  584 * PROCEDURE nonessential_cost: Returns literal cost of all nonessential PIs   *
  585 *                              in specified sum-of-product sum                *
  586 *******************************************************************************/
  587 nonessential_cost: PROCEDURE (s) RETURNS (FIXED BINARY);
  588      DECLARE (s, p, ne_cost) FIXED BINARY,
  589               b BIT (96) ALIGNED;
  590      ne_cost = 0;  b = BIT(0,95) || '1'B;
  591      DO p = 1 TO num_ne_pis;
  592           IF (inepi_sum(s) & b) ^= BIT(0,96) THEN ne_cost = ne_cost + p_i($cost,ne_pi(p));
  593           b = SUBSTR(b, 2);
  594           END;
  595      RETURN (ne_cost);
  596 END nonessential_cost;
  597 
  598 
  599 /******************************************************************************
  600 * PROCEDURE run_minimisation: Performs minimisation of switching function     *
  601 *******************************************************************************/
  602 run_minimisation: PROCEDURE;
  603      function_order = LOG2(term(num_terms)) + 1;
  604      PUT SKIP LIST ('(finding prime implicants)');
  605      CALL prime_implicants; /* generates complete set of prime implicants */
  606      CALL p_i_chart; /* generates array of pi coverage of minterms */
  607      CALL p_i_status; /* gives ess/noness/red status to p.i.s & e.p.i. cover status to minterms & de
      cides if unique */
  608      CALL p_i_cost; /* finds literal costs of p.i.s */
  609      IF ^ unique_solution THEN DO;
  610           PUT SKIP LIST ('(finding minimum cost solution)');
  611           CALL irredundant_nepi_sums; /* generate irredundant n.e.p.i. sums to cover remaining minte
      rms */
  612           CALL minimum_cost_solution; /* finds lowest literal cost solutions from irredundant n.e.p.
      i. sums */
  613           CALL ammend_p_i_status; /* gives min-cost-ess/min-cost-red status to n.e.p.i.s */
  614           END;
  615      solution_cost = essential_cost();
  616      IF ^ unique_solution THEN solution_cost = solution_cost + nonessential_cost(1);
  617 END run_minimisation;
  618 
  619 
  620 /*
  621 ###############################################################################
  622 #                          OUTPUT PROCEDURES                                  #
  623 ###############################################################################
  624 */
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 12    
  625 
  626 
  627 /******************************************************************************
  628 * PROCEDURE print_header_message: Prints title and version no to screen/file  *
  629 *******************************************************************************/
  630 print_header_message: PROCEDURE (f);
  631      DECLARE f FILE VARIABLE;
  632      PUT FILE (f) EDIT ('BOOLEAN MINIMISATION  ', version, COPY('=',26))
  633           (COLUMN(20),A,A,SKIP,COLUMN(20),A);
  634 END print_header_message;
  635 
  636 
  637 /******************************************************************************
  638 * PROCEDURE print_menu: Prints programme menu                                 *
  639 *******************************************************************************/
  640 print_menu: PROCEDURE;
  641      CALL print_header_message(SYSPRINT);
  642      PUT SKIP(3) LIST ('  A utility for the logical minimisation of boolean functions.');
  643      PUT SKIP(4) EDIT ('Menu',
  644                        '----',
  645                    '1. Enter data',
  646                    '2. Minimise',
  647                    '3. File results',
  648                    '4. Information',
  649                    '5. Quit',
  650                    'Enter 1-5 --> ')
  651           (COLUMN(28),A,SKIP,COLUMN(28),A,SKIP(2),5(COLUMN(24),A,SKIP),SKIP,COLUMN(24),A);
  652 END print_menu;
  653 
  654 
  655 /******************************************************************************
  656 * PROCEDURE print_input_data: Prints minterms and don't cares to screen/file  *
  657 *******************************************************************************/
  658 print_input_data: PROCEDURE (f);
  659      DECLARE f FILE VARIABLE, t FIXED BINARY;
  660      /* list the minterms */
  661      PUT FILE(f) SKIP(3) LIST ('Minterms:');
  662      IF num_minterms = 0 THEN PUT FILE(f) SKIP LIST ('*** none ***');
  663      ELSE PUT FILE(f) SKIP EDIT ((trim(minterm(t)) DO t = 1 TO num_minterms)) (A,X(1));
  664      /* list the dont-cares */
  665      PUT FILE(f) SKIP(3) LIST ('Don''t cares:');
  666      IF num_dont_cares = 0 THEN PUT FILE(f) SKIP LIST ('*** none ***');
  667      ELSE PUT FILE(f) SKIP EDIT ((trim(dont_care(t)) DO t = 1 TO num_dont_cares)) (A, X(1));
  668 END print_input_data;
  669 
  670 
  671 /******************************************************************************
  672 * PROCEDURE output_results: Prints minimisation results to screen/file        *
  673 *******************************************************************************/
  674 output_results: PROCEDURE (f);
  675      DECLARE f FILE VARIABLE;
  676 
  677      /* print header message */
  678      CALL print_header_message(f);
  679 
  680      /* list minterms and dont-cares */
  681      CALL print_input_data(f);
  682 
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 13    
  683      /* print the function order */
  684      PUT FILE(f) SKIP(3) EDIT ('The function order is ',trim(function_order)) (A);
  685 
  686      /* list the prime implicants and associated qualities */
  687      cell: PROCEDURE (p) RETURNS (CHARACTER (10) VARYING);
  688           DECLARE p FIXED BINARY;
  689           RETURN (trim(p_i($low,p)) || ',' || trim(p_i($high, p)));
  690      END cell;
  691      literals: PROCEDURE (p) RETURNS (CHARACTER (10) VARYING);
  692           DECLARE (p, l, b) FIXED BINARY, lits CHARACTER (10) VARYING;
  693           lits = ''; b = 1;
  694           DO l = 1 TO function_order;
  695                IF (equivalent(p_i($low,p),p_i($high,p)) & b) ^= 0 THEN
  696                     IF (p_i($low,p) & b) ^= 0 THEN lits = '1' || lits;
  697                     ELSE lits = '0' || lits;
  698                ELSE lits = '-' || lits;
  699                b = b + b;
  700                END;
  701           RETURN (lits);
  702      END literals;
  703      BEGIN;
  704           DECLARE p FIXED BINARY;
  705           PUT FILE(f) SKIP(3) LIST ('Prime Implicants:');
  706           PUT FILE(f) SKIP EDIT (' p.i.','cell','literals','cost','status')
  707                (A,COLUMN(11),A,COLUMN(25),A,COLUMN(40),A,COLUMN(50),A);
  708           DO p = 1 TO num_pis;
  709                PUT FILE(f) SKIP EDIT (p,cell(p),literals(p),p_i($cost,p),pi_status(p_i($status,p)))
  710                     (F(4),COLUMN(11),A,COLUMN(25),A,COLUMN(40),F(3),COLUMN(50),A);
  711                END;
  712           END;
  713 
  714      /* abort if no minterms */
  715      IF num_minterms = 0 THEN RETURN;
  716 
  717      /* print the prime implicant chart */
  718      tick: PROCEDURE (b) RETURNS (CHARACTER);
  719           DECLARE b BIT ALIGNED;
  720           IF b THEN RETURN ('*');
  721           RETURN (' ');
  722      END tick;
  723      BEGIN;
  724           DECLARE (m, b, p, num_blocks, mins_per_block) FIXED BINARY;
  725           PUT FILE(f) SKIP(3) LIST ('Prime Implicant Chart:');
  726           num_blocks = CEIL(DECIMAL(num_minterms) / 19.0);
  727           mins_per_block = CEIL(DECIMAL(num_minterms) / DECIMAL(num_blocks));
  728           DO b = 1 TO num_blocks;
  729                PUT FILE(f) SKIP LIST ('      minterm -->');
  730                PUT FILE(f) SKIP EDIT
  731                     (' p.i.',(minterm(m)
  732                     DO m = (b-1)*mins_per_block+1 TO MIN(num_minterms,b*mins_per_block))) (A,F(3),18
      (F(4)));
  733                DO p = 1 TO num_pis;
  734                     IF p_i($status,p) > $redundant THEN PUT FILE(f) SKIP EDIT
  735                          (p, (tick(pi_covers_minterm(p,m))
  736                          DO m = (b-1)*mins_per_block+1 TO MIN(num_minterms,b*mins_per_block))) (F(4)
      ,19(X(3),A));
  737                     END;
  738                END;
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 14    
  739           END;
  740 
  741      /* print the solution */
  742      BEGIN;
  743           DECLARE (p, s) FIXED BINARY, or CHARACTER (2) VARYING, all_covered BIT ALIGNED, b BIT (96)
       ALIGNED;
  744           IF unique_solution THEN PUT FILE(f) SKIP(3) LIST ('Unique Solution:');
  745           ELSE PUT FILE(f) SKIP(3) LIST ('Minimum Cost Solution:');
  746           PUT FILE(f) SKIP EDIT (' F = ') (A);
  747           /* essentials first */
  748           or = '';
  749           DO p = 1 TO num_pis;
  750                IF p_i($status,p) > $non_essential THEN DO;
  751                     PUT FILE(f) EDIT (or, trim(p)) (A);
  752                     or = '+';
  753                     END;
  754                END;
  755           /* if these do not cover all minterms then ... */
  756           all_covered = $true;
  757           IF ^ unique_solution THEN DO s = 1 TO num_minterms WHILE (all_covered);
  758                all_covered = $false;
  759                DO p = 1 TO num_pis WHILE (^ all_covered);
  760                     IF p_i($status,p) > $non_essential THEN
  761                          all_covered = pi_covers_minterm(p,s);
  762                     END;
  763                END;
  764           /* ... minimum cost nonessentials */
  765           IF ^ all_covered THEN DO;
  766                PUT FILE(f) EDIT (or) (A);
  767                DO s = 1 TO num_inepi_sums;
  768                     PUT FILE(f) EDIT ('(') (A);
  769                     or = ''; b = BIT(0,95) || '1'B;
  770                     DO p = 1 TO num_ne_pis;
  771                          IF (inepi_sum(s) & b) ^= BIT(0,96) THEN DO;
  772                               PUT FILE(f) EDIT (or,trim(ne_pi(p))) (A);
  773                               or = '+';
  774                               END;
  775                          b = SUBSTR(b,2);
  776                          END;
  777                     PUT FILE(f) EDIT (')') (A);
  778                     END;
  779                PUT FILE(f) SKIP LIST ('(parenthesised expressions are alternatives)');
  780                END;
  781           END;
  782 
  783      /* print the literal cost of the solution */
  784      PUT FILE(f) SKIP(3) EDIT ('Cost = ',trim(solution_cost),' literals')  (A);
  785 
  786 END output_results;
  787 
  788 
  789 /******************************************************************************
  790 * PROCEDURE print information: Prints information about the pregramme         *
  791 *******************************************************************************/
  792 print_information: PROCEDURE;
  793      PUT SKIP(2) EDIT (
  794      '  This utility determines the minimal 2-level solution for a Boolean switching',
  795      'function. This function must be fully specified as minterm and don''t care',
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 15    
  796      'arrays. The maximum number of input variables is 8. Data is entered as decimal',
  797      'values in the range 0 to 255 in any order. Ranges of values may be entered by',
  798      'using a hyphen. e.g. 10-15. This data is sorted by the programme. If any value',
  799      'is specified as both a minterm and a don''t care term then it is assumed to be',
  800      'a minterm. Values which are out of range are ignored.',
  801      '  Minimisation is done by first finding the prime implicants of the function',
  802      'and then reducing the PI chart. Prime implicants are found by taking pairs of',
  803      'terms (minterms or don''t cares) and testing to see if they form a cell. If they',
  804      'do then a search is made to determine whether all the vertices of the cell are',
  805      'either minterms or don''t cares. If so the cell is tested for containment by',
  806      'any PI already found. If it is not contained then this cell is a PI. PI chart',
  807      'reduction is done using the algebraic method after removing essential PIs and',
  808      'the minterms they cover') (SKIP,A);
  809 END print_information;
  810 
  811 
  812 /*
  813 ###############################################################################
  814 #                            MAIN PROGRAMME                                   #
  815 ###############################################################################
  816 */
  817 
  818 
  819 /* initialisation */
  820 num_minterms = 0;  num_dont_cares = 0;  num_terms = 0;
  821 new_data = $true;
  822 
  823 /* main loop */
  824 DO WHILE ($true);
  825      /* get menu selection */
  826      menu:
  827      PUT SKIP(3);
  828      CALL print_menu;
  829      GO TO menu_option(menu_selection());
  830 
  831      menu_option(1): /* enter data */
  832           CALL enter_data;
  833           GO TO menu;
  834 
  835      menu_option(2): /* minimise */
  836           IF num_terms < 2 THEN
  837                PUT SKIP LIST ('Insufficient data - cannot minimise.');
  838           ELSE DO;
  839                IF new_data THEN CALL run_minimisation;
  840                PUT SKIP(2);
  841                CALL output_results(SYSPRINT);
  842                new_data = $false;
  843                CALL continue_prompt;
  844                END;
  845           GO TO menu;
  846 
  847      menu_option(3): /* file results */
  848           IF ^ new_data THEN DO;
  849                OPEN FILE(results_file) TITLE ('bool_min.txt') LINESIZE(80) STREAM OUTPUT PRINT;
  850                CALL output_results(results_file);
  851                PUT PAGE FILE(results_file);
  852                CLOSE FILE(results_file);
  853                PUT SKIP LIST ('Results appended to file BOOL_MIN.');
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Source Listing                                           Page 16    
  854                END;
  855           ELSE PUT SKIP LIST ('No results to file.');
  856           GO TO menu;
  857 
  858      menu_option(4): /* information */
  859           CALL print_information;
  860           CALL continue_prompt;
  861           GO TO menu;
  862 
  863      menu_option(5): /* quit */
  864           STOP;
  865      END;
  866 
  867 END BSc_project;
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Procedure Map                                            Page 17    
  Offset  Line Statement type             Offset  Line Statement type             Offset  Line Statement type           
      08    11 PROCEDURE                BSC_PROJECT
      3A    39 DCL                            3A    41 DCL                      

      3F    56 PROCEDURE                EQUIVALENT
      56    58 RETURN                         B4    59 END                      

      C4    65 PROCEDURE                TRIM
      D5    67 RETURN                       01DA    68 END                      

    01EA    75 PROCEDURE                SORT_DATA
    0200    79 DO                           024B    80 Assignment                   026D    81 Assignment               
    0279    82 END                          0284    83 DO                           02CF    84 Assignment               
    02FA    85 Assignment                   030F    86 END                          031A    87 Assignment               
    0331    90 Assignment                   0335    91 DO                           034B    92 Assignment               
    034F    92 Assignment                   0353    93 DO                           03AC    95 IF                       
    03EF    95 DO                           03EF    96 Assignment                   0414    97 Assignment               
    042E    98 Assignment                   043A    99 Assignment                   043E   100 END                      
    0444   101 Assignment                   0448   102 DO                           049B   103 IF                       
    04B5   103 Assignment                   04B9   105 IF                           04E4   105 DO                       
    04E4   106 Assignment                   04F9   106 Assignment                   051C   106 Assignment               
    0532   107 Assignment                   0541   107 Assignment                   0559   107 Assignment               
    0569   108 Assignment                   056D   109 END                          056D   111 ELSE                     
    0572   111 IF                           059D   111 DO                           059D   112 Assignment               
    05C3   113 Assignment                   05E9   114 Assignment                   0604   115 Assignment               
    0610   116 Assignment                   0614   117 END                          0614   118 END                      
    0625   119 END                          0636   120 END                          0641   123 Assignment               
    064A   123 Assignment                   0653   124 DO                           069E   125 IF                       
    06B0   125 DO                           06B0   126 Assignment                   06BC   127 Assignment               
    06E1   128 END                          06E1   129 ELSE                         06E6   129 DO                       
    06E6   130 Assignment                   06F2   131 Assignment                   0717   132 END                      
    0717   133 END                          0725   134 END                      

    0735   147 PROCEDURE                MENU_SELECTION
    0750   149 DO                           0766   150 GET                          07E4   151 IF                       
    0831   151 DO                           0831   152 Assignment                   0878   153 IF                       
    0898   153 RETURN                       08AA   154 END                          08AA   155 END                      
    08B2   156 END                      

    08C2   162 PROCEDURE                CONTINUE_PROMPT
    08DE   163 PUT                          0957   164 GET                          09DB   165 END                      

    09EB   171 PROCEDURE                ENTER_DATA


    0A07   174 PROCEDURE                GET_INPUT_LIST
    0A22   179 Assignment                   0A2E   180 Assignment                   0A32   181 PUT                      
    0B37   185 DO                           0B4D   186 GET                          0BCB   187 IF                       
    0CAC   187 RETURN                       0CB1   188 ELSE                         0CB6   188 IF                       
    0D2A   188 DO                           0D2A   189 Assignment                   0D47   190 IF                       
    0D57   190 DO                           0D57   191 IF                           0D6D   191 DO                       
    0D6D   192 Assignment                   0D7C   193 Assignment                   0DD9   194 END                      
    0DD9   195 END                          0DD9   196 ELSE                         0DDE   196 IF                       
    0E07   196 DO                           0E07   197 Assignment                   0E89   197 IF                       
    0E99   197 Assignment                   0E9F   198 Assignment                   0F0D   198 IF                       
    0F1D   198 Assignment                   0F23   199 IF                           0F33   199 DO                       
    0F33   199 Assignment                   0F3E   199 Assignment                   0F46   199 Assignment               
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Procedure Map                                            Page 18    
    0F51   199 END                          0F51   200 DO                           0FAE   201 Assignment               
    0FBD   202 Assignment                   0FDE   203 END                          0FE6   204 END                      
    0FE9   205 END                          0FE9   206 ELSE                         0FF1   206 Assignment               
    0FFE   207 END                          1006   208 IF                           1010   208 PUT                      
    1081   209 END                          108C   211 DO                           10A2   212 PUT                      
    10FA   213 CALL                         111D   214 CALL                         1168   215 CALL                     
    11B3   216 PUT                          1344   223 Assignment                   1354   224 DO                       
    13A7   225 GET                          1425   226 Assignment                   14F0   227 END                      
    14FB   228 IF                           1539   228 RETURN                       153E   229 IF                       
    157C   229 DO                           157C   230 Assignment                   1585   230 Assignment               
    158E   231 END                          158E   232 IF                           168C   232 DO                       
    168C   233 CALL                         16AE   234 IF                           16EC   234 DO                       
    16EC   235 DO                           1731   236 Assignment                   175C   237 END                      
    1764   238 Assignment                   1778   239 END                          1778   240 ELSE                     
    177D   240 IF                           17BB   240 DO                           17BB   241 DO                       
    1800   242 Assignment                   1804   243 DO                           1853   244 IF                       
    187D   244 DO                           187D   245 Assignment                   1890   246 Assignment               
    1894   247 END                          1894   248 END                          189C   249 END                      
    18A7   250 END                          18A7   251 ELSE                         18AC   251 IF                       
    18EA   251 DO                           18EA   252 DO                           192F   253 Assignment               
    195A   254 END                          1962   255 Assignment                   1976   256 END                      
    1976   257 ELSE                         197B   257 DO                           197B   258 DO                       
    19C0   259 Assignment                   19C4   260 DO                           1A13   261 IF                       
    1A3D   261 DO                           1A3D   262 Assignment                   1A50   263 Assignment               
    1A54   264 END                          1A54   265 END                          1A5C   266 END                      
    1A67   267 END                          1A67   268 IF                           1A77   268 Assignment               
    1A7E   269 END                          1A81   270 END                          1A89   271 END                      

    1A99   284 PROCEDURE                PRIME_IMPLICANTS
    1AB6   290 Assignment                   1ABF   291 DO                           1B04   292 DO                       
    1B4B   294 Assignment                   1B60   294 Assignment                   1B75   296 IF                       
    1BA4   296 DO                           1BA4   298 Assignment                   1BDD   299 Assignment               
    1BE1   299 Assignment                   1BEA   300 DO                           1C3A   301 IF                       
    1C69   301 DO                           1C69   302 DO                           1C8C   302 Assignment               
    1C95   302 END                          1C9A   303 Assignment                   1CC1   304 Assignment               
    1CCA   305 END                          1CCA   306 END                          1CD5   307 IF                       
    1CDF   307 DO                           1CDF   309 Assignment                   1CE3   310 IF                       
    1CF3   310 DO                           1D42   311 IF                           1D5F   312 IF                       
    1DA8   313 Assignment                   1DEE   314 END                          1DF9   315 IF                       
    1E03   315 DO                           1E03   316 Assignment                   1E0F   317 Assignment               
    1E27   318 Assignment                   1E3F   319 END                          1E3F   320 END                      
    1E3F   321 END                          1E3F   322 END                          1E4A   323 END                      
    1E55   325 END                      

    1E65   331 PROCEDURE                P_I_CHART
    1E7B   334 DO                           1EC0   335 DO                           1F05   336 Assignment               
    2017   338 END                          2022   339 END                          202D   340 END                      

    203D   346 PROCEDURE                P_I_STATUS
    2054   350 DO                           2099   350 Assignment                   20AC   350 END                      
    20B4   352 DO                           20F9   353 Assignment                   20FF   354 DO                       
    2144   355 IF                           217F   355 DO                           217F   356 Assignment               
    2187   357 Assignment                   2190   358 END                          2190   359 END                      
    2198   360 IF                           21A5   360 Assignment                   21B8   361 END                      
    21C3   363 Assignment                   21C9   364 DO                           220E   365 Assignment               
    2251   366 DO                           22BF   367 IF                           231A   367 DO                       
    231A   368 Assignment                   235D   369 Assignment                   2366   370 END                      
    2369   371 END                          2374   372 END                          237F   374 Assignment               
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Procedure Map                                            Page 19    
    239E   376 IF                           23AB   376 DO                           23AB   377 DO                       
    23F0   378 IF                           2419   378 DO                           245E   379 IF                       
    24B9   379 Assignment                   24CF   380 END                          24DA   381 END                      
    24E5   383 Assignment                   24EE   384 DO                           2533   385 IF                       
    254D   385 DO                           254D   386 Assignment                   2559   386 Assignment               
    2571   387 END                          2571   388 END                          2579   389 END                      
    2579   391 END                      

    2589   397 PROCEDURE                P_I_COST
    259E   399 DO                           25E3   400 Assignment                   25F6   400 Assignment               
    25FC   401 Assignment                   264F   402 DO                           2697   403 IF                       
    26C3   403 Assignment                   26E6   404 Assignment                   26F4   405 END                      
    26FF   406 END                          270A   407 END                      

    271A   415 PROCEDURE                IRREDUNDANT_NEPI_SUMS
    273C   421 Assignment                   2742   422 DO                           278D   423 IF                       
    27B6   423 DO                           27B6   424 Assignment                   27BF   425 Assignment               
    27DE   426 Assignment                   2876   427 DO                           28C1   428 IF                       
    2909   429 Assignment                   298A   430 Assignment                   29B9   431 END                      
    29C7   432 END                          29C7   433 END                          29D5   436 Assignment               
    29DE   436 Assignment                   2A76   437 DO                           2AC1   439 IF                       
    2B4A   439 DO                           2B4A   441 Assignment                   2B56   441 Assignment               
    2B7E   442 END                          2B84   443 Assignment                   2BB3   444 END                      
    2BC1   447 DO                           2C09   449 Assignment                   2C0F   449 Assignment               
    2CA7   451 DO                           2CF2   453 IF                           2D83   453 DO                       
    2D83   455 Assignment                   2D8C   457 DO                           2DE7   459 Assignment               
    2E1B   461 Assignment                   2EA4   462 END                          2EB2   463 END                      
    2EB8   464 Assignment                   2EE7   465 END                          2EF8   467 Assignment               
    2F0C   469 Assignment                   2F13   470 DO                           2F5E   471 IF                       
    2FA0   471 DO                           2FEB   472 IF                           30E0   472 DO                       
    30E0   473 Assignment                   311D   474 Assignment                   3124   475 END                      
    312A   476 END                          313E   477 END                          314F   479 IF                       
    315C   479 CALL                         3180   480 END                          318E   482 END                      

    319E   489 PROCEDURE                MINIMUM_COST_SOLUTION
    31C0   494 DO                           320B   495 Assignment                   3248   496 END                      
    3253   498 Assignment                   325E   499 DO                           32A9   500 IF                       
    32C3   500 Assignment                   32D5   501 END                          32E0   503 DO                       
    332B   504 IF                           3345   504 DO                           3345   505 Assignment               
    3382   506 Assignment                   3389   507 END                          3389   508 END                      
    3397   509 IF                           33A4   509 CALL                         33C8   511 END                      

    33D8   518 PROCEDURE                AMMEND_P_I_STATUS
    33F6   523 Assignment                   340B   524 Assignment                   3462   525 DO                       
    34A7   526 Assignment                   351D   527 Assignment                   35DE   528 END                      
    35E9   530 DO                           362E   531 Assignment                   370C   532 END                      
    3717   534 Assignment                   37AF   535 DO                           37F4   536 IF                       
    387A   536 Assignment                   389A   537 ELSE                         389F   537 IF                       
    3925   537 Assignment                   3951   538 Assignment                   3980   539 END                      
    398B   541 END                      

    399B   548 PROCEDURE                REMOVE_REDUNDANT_SUMS
    39BD   551 DO                           3A02   552 IF                           3A44   552 DO                       
    3A44   553 Assignment                   3A48   554 DO                           3A9A   555 IF                       
    3ADC   555 DO                           3ADC   556 Assignment                   3B09   556 Assignment               
    3B46   557 Assignment                   3B4A   558 END                          3B50   559 END                      
    3B5B   560 IF                           3B65   560 DO                           3B65   561 Assignment               
    3B71   562 RETURN                       3B76   563 END                          3B76   564 END                      
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Procedure Map                                            Page 20    
    3B7C   565 END                          3B87   567 END                      

    3B97   573 PROCEDURE                ESSENTIAL_COST
    3BB2   575 Assignment                   3BB8   576 DO                           3BFD   577 IF                       
    3C17   577 Assignment                   3C32   578 END                          3C3A   579 RETURN                   
    3C49   580 END                      

    3C59   587 PROCEDURE                NONESSENTIAL_COST
    3C77   590 Assignment                   3C7D   590 Assignment                   3D15   591 DO                       
    3D5A   592 IF                           3DF0   592 Assignment                   3E1E   593 Assignment               
    3E4D   594 END                          3E58   595 RETURN                       3E67   596 END                      

    3E77   602 PROCEDURE                RUN_MINIMISATION
    3E94   603 Assignment                   3F06   604 PUT                          3F77   605 CALL                     
    3F9A   606 CALL                         3FBD   607 CALL                         3FE0   608 CALL                     
    4003   609 IF                           4010   609 DO                           4010   610 PUT                      
    4081   611 CALL                         40A4   612 CALL                         40C7   613 CALL                     
    40EA   614 END                          40EA   615 Assignment                   411B   616 IF                       
    4128   616 Assignment                   4174   617 END                      

    4184   630 PROCEDURE                PRINT_HEADER_MESSAGE
    41A5   632 PUT                          4291   634 END                      

    42A1   640 PROCEDURE                PRINT_MENU
    42B8   641 CALL                         4302   642 PUT                          437B   643 PUT                      
    4538   652 END                      

    4548   658 PROCEDURE                PRINT_INPUT_DATA
    4565   661 PUT                          45DE   662 IF                           45EE   662 PUT                      
    465F   663 ELSE                         4664   663 PUT                          477B   665 PUT                      
    47F4   666 IF                           4804   666 PUT                          4875   667 ELSE                     
    487A   667 PUT                          4991   668 END                      

    49A1   674 PROCEDURE                OUTPUT_RESULTS
    49BC   678 CALL                         49E6   681 CALL                         4A10   684 PUT                      

    4B0C   687 PROCEDURE                CELL
    4B1D   689 RETURN                       4CB1   690 END                      

    4CC1   691 PROCEDURE                LITERALS
    4CD6   693 Assignment                   4CDC   693 Assignment                   4CE2   694 DO                       
    4D2D   695 IF                           4DAB   696 IF                           4DE9   696 Assignment               
    4E55   697 ELSE                         4E5A   697 Assignment                   4EC6   698 ELSE                     
    4ECB   698 Assignment                   4F3A   699 Assignment                   4F48   700 END                      
    4F53   701 RETURN                       4F6D   702 END                      

    4F78   703 BEGIN                    
    4F97   705 PUT                          5013   706 PUT                          5147   708 DO                       
    518F   709 PUT                          535C   711 END                          5367   712 END                      
    5371   715 IF                           5381   715 RETURN                   

    538B   718 PROCEDURE                TICK
    539C   720 IF                           53AA   720 RETURN                       53BD   721 RETURN                   
    53D0   722 END                      

    53DB   723 BEGIN                    
    53FA   725 PUT                          5476   726 Assignment                   54F7   727 Assignment               
    5582   728 DO                           55C4   729 PUT                          5638   730 PUT                      
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                               Procedure Map                                            Page 21    
    575C   733 DO                           57A4   734 IF                           57C1   734 PUT                      
    5986   737 END                          5991   738 END                          599C   739 END                      

    59A6   742 BEGIN                    
    59C5   744 IF                           59D2   744 PUT                          5A4E   745 ELSE                     
    5A53   745 PUT                          5ACF   746 PUT                          5B53   748 Assignment               
    5B59   749 DO                           5BA1   750 IF                           5BBE   750 DO                       
    5BBE   751 PUT                          5CAA   752 Assignment                   5CBA   753 END                      
    5CBA   754 END                          5CC5   756 Assignment                   5CC9   757 IF                       
    5CD6   757 DO                           5D28   758 Assignment                   5D2C   759 DO                       
    5D7E   760 IF                           5D9B   761 Assignment                   5DF6   762 END                      
    5E01   763 END                          5E0C   765 IF                           5E16   765 DO                       
    5E16   766 PUT                          5E97   767 DO                           5EDF   768 PUT                      
    5F63   769 Assignment                   5F69   769 Assignment                   6001   770 DO                       
    6049   771 IF                           60E0   771 DO                           60E0   772 PUT                      
    61DC   773 Assignment                   61EC   774 END                          61F2   775 Assignment               
    6221   776 END                          622C   777 PUT                          62B0   778 END                      
    62BB   779 PUT                          632F   780 END                          632F   781 END                      
    6339   784 PUT                          645C   786 END                      

    646C   792 PROCEDURE                PRINT_INFORMATION
    648A   793 PUT                          677B   809 END                          6786   820 Assignment               
    678C   820 Assignment                   6792   820 Assignment                   6798   821 Assignment               
    679F   824 DO                           67BB   826 PUT                          6819   828 CALL                     
    683B   829 GO                           6875   831 CALL                         689D   833 GO                       
    68A2   835 IF                           68B5   837 PUT                          6926   838 ELSE                     
    692B   838 DO                           692B   839 IF                           6938   839 CALL                     
    695A   840 PUT                          69B2   841 CALL                         69FB   842 Assignment               
    6A02   843 CALL                         6A24   844 END                          6A24   845 GO                       
    6A29   847 IF                           6A3C   848 DO                           6A3C   849 OPEN                     
    6AB0   850 CALL                         6AF9   851 PUT                          6B49   852 CLOSE                    
    6B99   853 PUT                          6C0A   854 END                          6C0A   855 ELSE                     
    6C0F   855 PUT                          6C80   856 GO                           6C85   858 CALL                     
    6CAD   860 CALL                         6CCF   861 GO                           6CD4   863 STOP                     
    6CE7   865 END                          6CF2   867 END                          6CF7   867 Initialization           
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                  Symbol Table and Cross-Reference Listing                              Page 22    
ACTION               172  Char(30) Var                                          [ DSA-'40'x(32) ]
                            223   224   225   226   228   229   232   234   240   251 
ALL_COVERED          743  Bit(1) Aligned                                        [ DSA-'29'x(1) ]
                            756   757   758   759   761   765 
ALL_VERTICES_CONTAINED
                     287  Bit(1) Aligned                                        [ DSA-'31'x(1) ]
                            299   300   303   307 
AMMEND_P_I_STATUS    518  Entry                                                 [ Code+'33EA'x ]
                            613 
B                     76  Bit(1) Aligned                                        [ DSA-'27'x(1) ]
                            107 
B                    398  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            400   403   404 
B                    417  Bit(96) Aligned                                       [ DSA-'36'x(12) ]
                            426   429   430   436   439   441   443   449   453   461 
                            464 
B                    519  Bit(96) Aligned                                       [ DSA-'44'x(12) ]
                            534   536   537   538 
B                    589  Bit(96) Aligned                                       [ DSA-'30'x(12) ]
                            590   592   593 
B                    692  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            693   695   696   699 
B                    719  Bit(1) Aligned Parameter                              [ Loc @DSA+'08'x(1) ]
                            720 
B                    724  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            728   730   734 
B                    743  Bit(96) Aligned                                       [ DSA-'35'x(12) ]
                            769   771   775 
BINARY                28  Builtin
                            152   193   197   198 
BIT                   28  Builtin
                            426   436   439   449   453   471   472   473   505   534 
                            536   537   552   555   556   590   592   769   771 
BSC_PROJECT           11  Entry External Options(Main )                         [ Code+'15'x ]
C                    416  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            449   455   457   467   471   472   473 
CEIL                  28  Builtin
                            726   727 
CELL                 687  Entry                                                 [ Code+'4B11'x ]
                            709 
CHARACTER             28  Builtin
                             67 
CONTINUE              40  Char(30) Var                                          [ DSA-'A5B0'x(32) ]
                            164 
CONTINUE_PROMPT      162  Entry                                                 [ Code+'08D2'x ]
                            843   860 
COPY                  28  Builtin
                            632 
COVERED              287  Bit(1) Aligned                                        [ DSA-'32'x(1) ]
                            309   310   313   315 
DECIMAL               28  Builtin
                            726   727 
DELETED              172  Bit(1) Aligned                                        [ DSA-'41'x(1) ]
                            242   243   246   259   260   263 
DONT_CARE             31  (512) Fixed Bin(15,0) Aligned                         [ DSA-'082C'x(2) ]
                             84   131   253   261   262   667 
ENTER_DATA           171  Entry                                                 [ Code+'09F6'x ]
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                  Symbol Table and Cross-Reference Listing                              Page 23    
                            831 
EPI                  347  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            356   360 
EPI_COVERS_MINTERM    35  (256) Bit(1) Static                                   [ BSS+'02'x.0(0.1) ]
                            365   366   368   378   423 
EQUIVALENT            56  Entry                                                 [ Code+'4A'x ]
                            298   401   695 
ESSENTIAL_COST       573  Entry                                                 [ Code+'3BA6'x ]
                            615 
ESS_PIS              519  Bit(96) Aligned                                       [ DSA-'2C'x(12) ]
                            523   524   526   531   536 
EXCESS_TERMS          76  Bit(1) Aligned                                        [ DSA-'29'x(1) ]
                             90    91    92    93    99   102   116 
E_COST               574  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            575   577   579 
F                    631  File Variable Aligned Parameter                       [ Loc @DSA+'08'x(12) ]
                            632 
F                    659  File Variable Aligned Parameter                       [ Loc @DSA+'08'x(12) ]
                            661   662   663   665   666   667 
F                    675  File Variable Aligned Parameter                       [ Loc @DSA+'08'x(12) ]
                            678   681   684   705   706   709   725   729   730   734 
                            744   745   746   751   766   768   772   777   779   784 
FUNCTION_ORDER        31  Fixed Bin(15,0) Aligned                               [ DSA-'18EE'x(2) ]
                            402   603   684   694 
GET_INPUT_LIST       174  Entry                                                 [ Code+'0A16'x ]
                            233 
I                     76  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                             93    95    96    97   102 
I                    172  Fixed Bin(15,0) Aligned                               [ DSA-'44'x(2) ]
                            243   244   245   260   261   262 
I                    286  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            291   292   294   299 
I                    549  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            551   552   554   556   561 
ILLEGAL_ENTRY        177  Bit(1) Aligned                                        [ DSA-'45'x(1) ]
                            180   206   208 
INDEX                 28  Builtin
                            188   189 
INEPI_SUM             37  (3000) Bit(96) Aligned                                [ DSA-'A590'x(12) ]
                            441   459   461   471   472   473   505   523   526   527 
                            531   552   555   556   592   771 
INPUT_ITEM           176  Char(30) Var                                          [ DSA-'44'x(32) ]
                            186   187   188   189   193   196   197   198 
IRREDUNDANT_NEPI_SUMS
                     415  Entry                                                 [ Code+'2730'x ]
                            611 
I_EQV_J              286  Fixed Bin(15,0) Aligned                               [ DSA-'2A'x(2) ]
                            298   301 
J                     76  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            102   103   105   106   107   111   112   113   114 
J                    286  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            292   294 
J                    549  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            554   555   556 
L                    398  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            402 
L                    692  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            694 
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                  Symbol Table and Cross-Reference Listing                              Page 24    
LENGTH                28  Builtin
                            196 
LITERALS             398  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            401   403 
LITERALS             691  Entry                                                 [ Code+'4CCA'x ]
                            709 
LITS                 692  Char(10) Var                                          [ DSA-'30'x(12) ]
                            693   696   697   698   701 
LOG2                  28  Builtin
                            603 
LOWER                175  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            198   199   200 
M                    148  Fixed Bin(15,0) Aligned                               [ DSA-'42'x(2) ]
                            152   153 
M                    286  Fixed Bin(15,0) Aligned                               [ DSA-'30'x(2) ]
                            299   302   303   304 
M                    332  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            334   336 
M                    347  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            352   355   364   365   366   367   368   377   378   379 
M                    416  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            422   423   428   447   453 
M                    724  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            730   734 
MENU                 826  Label                                                 [ Code+'67BB'x ]
                            833   845   856   861 
MENU_ITEM            148  Char(30) Var                                          [ DSA-'40'x(32) ]
                            150   151   152 
MENU_OPTION          831* (5) Label Variable Aligned                            [ DSA-'A5D8'x(8) ]
                            829 
MENU_SELECTION       147  Entry                                                 [ Code+'0744'x ]
                            829 
MIN                   28  Builtin
                            730   734 
MINIMUM_COST_SOLUTION
                     489  Entry                                                 [ Code+'31B4'x ]
                            612 
MINS_PER_BLOCK       724  Fixed Bin(15,0) Aligned                               [ DSA-'2A'x(2) ]
                            727   730   734 
MINTERM               31  (512) Fixed Bin(15,0) Aligned                         [ DSA-'042C'x(2) ]
                             80   127   236   244   245   336   663   730 
MIN_COST             490  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            498   500   504 
NEW_DATA              35  Bit(1) Static                                         [ BSS+'01'x(1) ]
                            268   821   839   842   847 
NE_COST              588  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            590   592   595 
NE_PI                 31  (96) Fixed Bin(15,0) Aligned                          [ DSA-'18EC'x(2) ]
                            386   428   536   537   592   772 
NONESSENTIAL_COST    587  Entry                                                 [ Code+'3C6B'x ]
                            495   616 
NUM_BLOCKS           724  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            726   727   728 
NUM_COVERS           347  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            353   357   360   363   369   374 
NUM_DONT_CARES        31  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                             83    87   123   130   131   230   253   255   260   666 
                            667   820 
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                  Symbol Table and Cross-Reference Listing                              Page 25    
NUM_INEPI_SUMS        31  Fixed Bin(15,0) Aligned                               [ DSA-'2C'x(2) ]
                            436   441   457   459   467   470   471   494   499   503 
                            525   530   551   554   561   767 
NUM_MINTERMS          31  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                             79    84    85    87   123   126   127   230   236   238 
                            243   334   352   364   374   377   422   662   663   715 
                            726   727   730   734   757   820 
NUM_NE_PIS            31  Fixed Bin(15,0) Aligned                               [ DSA-'2A'x(2) ]
                            383   386   427   437   451   535   591   770 
NUM_PIS               31  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            290   310   316   317   318   335   350   354   366   378 
                            384   399   576   708   733   749   759 
NUM_TERMS             31  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                             87    93    96    97    98   113   114   115   124   179 
                            191   192   193   200   201   202   235   238   241   252 
                            255   258   268   291   292   603   820   835 
NUM_UMIN_NEPIS       416  Fixed Bin(15,0) Aligned                               [ DSA-'2A'x(2) ]
                            421   424   425   429   447 
OR                   743  Char(2) Var                                           [ DSA-'28'x(4) ]
                            748   751   752   766   769   772   773 
OUTPUT_RESULTS       674  Entry                                                 [ Code+'49B0'x ]
                            841   850 
P                    286  Fixed Bin(15,0) Aligned                               [ DSA-'2E'x(2) ]
                            310   311   312   313 
P                    332  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            335   336 
P                    347  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            350   354   355   356   366   367   378   379   384   385 
                            386 
P                    398  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            399   400   401   403 
P                    416  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            427   428   437   451 
P                    574  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            576   577 
P                    588  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            591   592 
P                    688  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                            689 
P                    692  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                            695   696 
P                    704  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            708   709 
P                    724  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            733   734 
P                    743  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            749   750   751   759   760   761   770   772 
PI_COVERS_MINTERM     35  (256,256) Bit(1) Static                               [ BSS+'22'x.0(0.1) ]
                            336   355   367   379   428   734   761 
PI_STATUS             41  (5) Char(30) Var Static Init()                        [ Static+'7A'x(32) ]
                            709 
PRIME_IMPLICANTS     284  Entry                                                 [ Code+'1AAA'x ]
                            605 
PRINT_HEADER_MESSAGE
                     630  Entry                                                 [ Code+'4199'x ]
                            214   641   678 
PRINT_INFORMATION    792  Entry                                                 [ Code+'647E'x ]
                            858 
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                  Symbol Table and Cross-Reference Listing                              Page 26    
PRINT_INPUT_DATA     658  Entry                                                 [ Code+'4559'x ]
                            215   681 
PRINT_MENU           640  Entry                                                 [ Code+'42AC'x ]
                            828 
P_I                   31  (4,256) Fixed Bin(15,0) Aligned                       [ DSA-'182C'x(2) ]
                            311   312   313   317   318   336   350   360   367   379 
                            385   400   401   403   536   537   577   592   689   695 
                            696   709   734   750   760 
P_I_CHART            331  Entry                                                 [ Code+'1E6F'x ]
                            606 
P_I_COST             397  Entry                                                 [ Code+'2592'x ]
                            608 
P_I_STATUS           346  Entry                                                 [ Code+'2048'x ]
                            607 
REDUNDANT_SUMS       418  Bit(1) Aligned                                        [ DSA-'0C37'x(1) ]
                            469   474   479 
REDUNDANT_SUMS       491  Bit(1) Aligned                                        [ DSA-'07F5'x(1) ]
                            506   509 
RED_PIS              519  Bit(96) Aligned                                       [ DSA-'38'x(12) ]
                            524   527   537 
REMOVE_REDUNDANT_SUMS
                     548  Entry                                                 [ Code+'39B1'x ]
                            479   509 
RESULTS_FILE          43  File Aligned External                                 [ Ext+'00'x(12) ]
                            849   850   851   852 
RUN_MINIMISATION     602  Entry                                                 [ Code+'3E88'x ]
                            839 
S                    416  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            457   459   461   470   471   472 
S                    490  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            494   495   499   500   503   504   505 
S                    520  Fixed Bin(15,0) Aligned                               [ DSA-'46'x(2) ]
                            525   526   527   530   531   535   536   537 
S                    588  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                            592 
S                    743  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            757   761   767   771 
SOLUTION_COST         31  Fixed Bin(15,0) Aligned                               [ DSA-'18F0'x(2) ]
                            615   616   784 
SORTED                76  Bit(1) Aligned                                        [ DSA-'28'x(1) ]
                             92    93   101   103   108 
SORT_DATA             75  Entry                                                 [ Code+'01F4'x ]
                            213 
SUBSTR                28  Builtin
                             67   197   198   430   443   464   538   593   775 
SUM_COST             490  (1000) Fixed Bin(15,0) Aligned                        [ DSA-'07F4'x(2) ]
                            495   498   500   504 
SUM_MOVED            549  Bit(1) Aligned                                        [ DSA-'25'x(1) ]
                            553   554   557   560 
SYSIN                 25  File Aligned External                                 [ Ext+'00'x(12) ]
                            150   164   186   225 
SYSPRINT              26  File Aligned External Print                           [ Ext+'00'x(12) ]
                            163   181   208   212   214   215   216   604   610   641 
                            642   643   793   826   837   840   841   853   855 
T                     76  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                             79    80    81    83    84    85   106   124   125   127 
                            131 
T                    172  Fixed Bin(15,0) Aligned                               [ DSA-'46'x(2) ]
Aug 14, 2024  11:57                                       /*                                                            
1.3.1                                  Symbol Table and Cross-Reference Listing                              Page 27    
                            189   190   196   197   198   199   200   202   235   236 
                            241   244   252   253   258   261 
T                    659  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            663   667 
TERM                  31  (1024) Fixed Bin(15,0) Aligned                        [ DSA-'102C'x(2) ]
                             80    84    95    96   103   105   106   111   113   127 
                            131   193   202   236   244   253   261   294   302   303 
                            603 
TERM_I               286  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            294   296   298   300   301   312   317 
TERM_J               286  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            294   296   298   300   311   313   318 
TICK                 718  Entry                                                 [ Code+'5390'x ]
                            734 
TRANSLATE             28  Builtin
                            187   226 
TRIM                  65  Entry                                                 [ Code+'C9'x ]
                            663   667   684   689   751   772   784 
TYPE                  76  (512) Bit(1) Aligned                                  [ DSA-'0229'x(1) ]
                             81    85    97   107   112   114   125 
UMIN_NEPIS           417  (256) Bit(96) Aligned                                 [ DSA-'0C36'x(12) ]
                            425   429   439   453 
UNIQUE_SOLUTION       35  Bit(1) Static                                         [ BSS+'00'x(1) ]
                            374   376   609   616   744   757 
UPPER                175  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            197   199   200 
VALUE                 66  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                             67 
VERIFY                28  Builtin
                             67   151   188   224 
VERSION               39  Char(4) Static Init()                                 [ Static+'76'x(4) ]
                            632 
VERTEX               286  Fixed Bin(15,0) Aligned                               [ DSA-'2C'x(2) ]
                            300   301   302   303 
X                     57  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                             58 
Y                     57  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'0C'x(2) ]
                             58 

End of compilation. 
