Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 1     
    1 /*
    2 ===============================================================================
    3 = UTILITY PROGRAMME FOR THE MINIMISATION OF BOOLEAN FUNCTIONS                 =
    4 = Written by R.C.LUCKHURST, September 1986                                    =
    5 = for final year BSc Electrical Engineering project, Bristol Polytechnic      =
    6 ===============================================================================
    7 */
    8 
    9 
   10 BSc_project: PROCEDURE OPTIONS (MAIN);
   11 
   12 %REPLACE $true BY '1'B;
   13 %REPLACE $false BY '0'B;
   14 %REPLACE $low BY 1;
   15 %REPLACE $high BY 2;
   16 %REPLACE $cost BY 3;
   17 %REPLACE $status BY 4;
   18 %REPLACE $redundant BY 1;
   19 %REPLACE $min_cost_redundant BY 2;
   20 %REPLACE $non_essential BY 3;
   21 %REPLACE $min_cost_essential BY 4;
   22 %REPLACE $essential BY 5;
   23 
   24 DECLARE SYSIN FILE STREAM INPUT ENVIRONMENT(INTERACTIVE);
   25 DECLARE SYSPRINT FILE STREAM OUTPUT PRINT ENVIRONMENT(INTERACTIVE);
   26 
   27 DECLARE (BINARY, BIT, CEIL, CHARACTER, COPY, DECIMAL, INDEX,
   28         LENGTH, LOG2, MIN, SUBSTR, TRANSLATE, VERIFY) BUILTIN,
   29 
   30         (num_minterms, num_dont_cares, num_terms, num_pis, num_ne_pis, num_inepi_sums,
   31         minterm (512), dont_care (512), term (1024), p_i (4,256), ne_pi (96),
   32         function_order, solution_cost) FIXED BINARY,
   33 
   34         (unique_solution, new_data,
   35         epi_covers_minterm (256), pi_covers_minterm (256,256)) BIT STATIC,
   36         inepi_sum (3000) BIT (96) ALIGNED,
   37 
   38         version CHARACTER (4) STATIC INITIAL ('V1.0'),
   39         continue CHARACTER (30) VARYING,
   40         pi_status (5) CHARACTER(30) VARYING STATIC INITIAL
   41         ('redundant','minimum-cost redundant','non-essential','minimum-cost essential','essential'),
      
   42         results_file FILE;
   43 
   44 
   45 /*
   46 ###############################################################################
   47 #                          UTILITY PROCEDURES                                 #
   48 ###############################################################################
   49 */
   50 
   51 
   52 /******************************************************************************
   53 * PROCEDURE equivalent: Returns logical equivalence between 2 integers        *
   54 *******************************************************************************/
   55 equivalent: PROCEDURE (x,y) RETURNS (FIXED BINARY);
   56      DECLARE (x,y) FIXED BINARY;
   57      RETURN (x & y  |  ^ x & ^ y);
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 2     
   58 END equivalent;
   59 
   60 
   61 /******************************************************************************
   62 * PROCEDURE trim: Returns integer with no leading spaces                      *
   63 *******************************************************************************/
   64 trim: PROCEDURE (value) RETURNS (CHARACTER (10) VARYING);
   65      DECLARE value FIXED BINARY;
   66      RETURN (SUBSTR(CHARACTER(value),VERIFY(CHARACTER(value),' ')));
   67 END trim;
   68 
   69 
   70 /******************************************************************************
   71 * PROCEDURE sort_data: Sorts minterms and don't cares into ascending order    *
   72 *           and deletes duplicate terms and terms out of range                *
   73 *******************************************************************************/
   74 sort_data: PROCEDURE;
   75      DECLARE (i, j, t) FIXED BINARY, (b, sorted, excess_terms, type (512)) BIT ALIGNED;
   76 
   77      /* first make an all-term list */
   78      DO t = 1 TO num_minterms;
   79           term(t) = minterm(t);
   80           type(t) = $true; /* ie minterm */
   81           END;
   82      DO t = 1 TO num_dont_cares;
   83           term(num_minterms + t) = dont_care(t);
   84           type(num_minterms + t) = $false; /* ie dont-care */
   85           END;
   86      num_terms = num_minterms + num_dont_cares;
   87 
   88      /* then sort into ascending order */
   89      excess_terms = $true;
   90      DO WHILE (excess_terms);
   91           excess_terms = $false; sorted = $false;
   92           DO i = num_terms TO 1 BY -1 WHILE (^ (sorted | excess_terms));
   93                /* erase terms which are out of range */
   94                IF term(i) < 0 | term(i) > 255 THEN DO;
   95                     term(i) = term(num_terms);
   96                     type(i) = type(num_terms);
   97                     num_terms = num_terms - 1;
   98                     excess_terms = $true;
   99                     END;
  100                sorted = $true;
  101                DO j = 1 TO i - 1 WHILE (^ excess_terms);
  102                     IF term(j) < 0 THEN sorted = $false;
  103                     /* if terms not in ascending order then swap them */
  104                     IF term(j) > term(j + 1) THEN DO;
  105                          t = term(j); term(j) = term(j + 1); term(j + 1) = t;
  106                          b = type(j); type(j) = type(j + 1); type(j + 1) = b;
  107                          sorted = $false;
  108                          END;
  109                     /* erase duplicate terms and give minterm priority */
  110                     ELSE IF term(j) = term(j + 1) THEN DO;
  111                          type(j) = (type(j) | type(j + 1));
  112                          term(j + 1) = term(num_terms);
  113                          type(j + 1) = type(num_terms);
  114                          num_terms = num_terms - 1;
  115                          excess_terms = $true;
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 3     
  116                          END;
  117                     END;
  118                END;
  119           END;
  120 
  121      /* now extract sorted terms back into ordered minterm & dont-care arrays */
  122      num_minterms = 0; num_dont_cares = 0;
  123      DO t = 1 TO num_terms;
  124           IF type(t) THEN DO;
  125                num_minterms = num_minterms + 1;
  126                minterm(num_minterms) = term(t);
  127                END;
  128           ELSE DO;
  129                num_dont_cares = num_dont_cares + 1;
  130                dont_care(num_dont_cares) = term(t);
  131                END;
  132           END;
  133 END sort_data;
  134 
  135 
  136 /*
  137 ###############################################################################
  138 #                           INPUT PROCEDURES                                  #
  139 ###############################################################################
  140 */
  141 
  142 
  143 /******************************************************************************
  144 * PROCEDURE menu_selection: Returns menu item requested: 1 - 5                *
  145 *******************************************************************************/
  146 menu_selection: PROCEDURE RETURNS (FIXED BINARY);
  147      DECLARE menu_item CHARACTER (30) VARYING, m FIXED BINARY;
  148      DO WHILE ($true);
  149           GET EDIT (menu_item) (A);
  150           IF VERIFY(menu_item, '12345') = 0 THEN DO;
  151                m = BINARY(menu_item);
  152                IF m >= 1 & m <= 5 THEN RETURN (m);
  153                END;
  154           END;
  155 END menu_selection;
  156 
  157 
  158 /******************************************************************************
  159 * PROCEDURE continue_prompt: Stops screen scrolling                           *
  160 *******************************************************************************/
  161 continue_prompt: PROCEDURE;
  162      PUT SKIP(2) LIST ('Press RETURN to continue -->');
  163      GET EDIT (continue) (A);
  164 END continue_prompt;
  165 
  166 
  167 /******************************************************************************
  168 * PROCEDURE enter_data: Used to enter minterms and don't cares                *
  169 *******************************************************************************/
  170 enter_data: PROCEDURE;
  171      DECLARE action CHARACTER (30) VARYING, deleted BIT ALIGNED, (i, t) FIXED BINARY;
  172 
  173      get_input_list: PROCEDURE;
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 4     
  174           DECLARE (upper, lower) FIXED BINARY,
  175                   input_item CHARACTER (30) VARYING,
  176                   illegal_entry BIT ALIGNED;
  177 
  178                num_terms = 0;
  179                illegal_entry = $false;
  180                PUT EDIT ('Enter values in the range 0 to 255 seperated by commas or blanks or return
      s. ',
  181                               'A range of values may be entered using a hyphen, e.g. 10-15. ',
  182                               'Type E after the last entry. ',
  183                               '--> ') (SKIP, A);
  184                DO WHILE ($true);
  185                     GET EDIT (input_item) (A);
  186                     IF TRANSLATE(input_item, 'E', 'e') = 'E' THEN RETURN;
  187                     ELSE IF VERIFY(input_item, '-0123456789') = 0 & INDEX(input_item, '-') ^= 1 THEN
       DO;
  188                          t = INDEX(input_item, '-');
  189                          IF t = 0 THEN DO;
  190                               IF num_terms <= 255 THEN DO;
  191                                    num_terms = num_terms + 1;
  192                                    term(num_terms) = BINARY(input_item);
  193                                    END;
  194                               END;
  195                          ELSE IF t <= 5 & LENGTH(input_item) - t < 5 THEN DO;
  196                               upper = BINARY(SUBSTR(input_item,t + 1)); IF upper > 255 THEN upper = 
      255;
  197                               lower = BINARY(SUBSTR(input_item, 1,t - 1)); IF lower > 255 THEN lower
       = 255;
  198                               IF lower > upper THEN DO; t = lower; lower = upper; upper = t; END;
  199                               DO t = lower TO upper WHILE (num_terms <= 255);
  200                                    num_terms = num_terms + 1;
  201                                    term(num_terms) = t;
  202                                    END;
  203                               END;
  204                          END;
  205                     ELSE illegal_entry = $true;
  206                     END;
  207                IF illegal_entry THEN PUT SKIP LIST ('Illegal entries have been disregarded. ');
  208           END get_input_list;
  209 
  210           DO WHILE ($true);
  211           PUT SKIP(3);
  212                CALL sort_data;
  213                CALL print_header_message(SYSPRINT);
  214                CALL print_input_data(SYSPRINT);
  215                PUT SKIP(3) EDIT ('C = Clear data',
  216                                  'AM = Add Minterms',
  217                                  'DM = Delete Minterms',
  218                                  'AD = Add Don''t cares',
  219                                  'DD = Delete Don''t cares',
  220                                  'E = End data entry',
  221                                  'Enter C/AM/DM/AD/DD/E --> ') (6(COLUMN(24),A,SKIP),SKIP,COLUMN(24)
      ,A);
  222                action = ' ';
  223                DO WHILE (VERIFY(action,'ACDEM') ^= 0);
  224                     GET EDIT (action) (A);
  225                     action = TRANSLATE(action, 'ACDEM', 'acdem');
  226                     END;
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 5     
  227                IF action = 'E' THEN RETURN;
  228                IF action = 'C' THEN DO;
  229                     num_minterms = 0; num_dont_cares = 0;
  230                     END;
  231                IF action = 'AM' | action = 'DM' | action = 'AD' | action = 'DD' THEN DO;
  232                     CALL get_input_list;
  233                     IF action = 'AM' THEN DO; /* add input list to minterms */
  234                          DO t = 1 TO num_terms;
  235                               minterm(num_minterms + t) = term(t);
  236                               END;
  237                          num_minterms = num_minterms + num_terms;
  238                     END;
  239                ELSE IF action = 'DM' THEN DO; /* make minterms contained in i/p list out of range fo
      r deletion */
  240                     DO t = 1 TO num_terms;
  241                          deleted = $false;
  242                          DO i = 1 TO num_minterms WHILE (^ deleted);
  243                               IF minterm(i) = term(t) THEN DO;
  244                                    minterm(i) = -1;
  245                                    deleted = $true;
  246                                    END;
  247                               END;
  248                          END;
  249                     END;
  250                ELSE IF action = 'AD' THEN DO; /* add input list to dont-cares */
  251                     DO t = 1 TO num_terms;
  252                          dont_care(num_dont_cares + t) = term(t);
  253                          END;
  254                     num_dont_cares = num_dont_cares + num_terms;
  255                     END;
  256                ELSE DO; /* make dont-cares contained in i/p list out of range for deletion when sort
      ed */
  257                     DO t = 1 TO num_terms;
  258                          deleted = $false;
  259                          DO i = 1 TO num_dont_cares WHILE (^ deleted);
  260                               IF dont_care(i) = term(t) THEN DO;
  261                                    dont_care(i) = -1;
  262                                    deleted = $true;
  263                                    END;
  264                               END;
  265                          END;
  266                     END;
  267                IF num_terms > 0 THEN new_data = $true;
  268                END;
  269           END;
  270 END enter_data;
  271 
  272 
  273 /*
  274 ###############################################################################
  275 #                       MINIMISATION PROCEDURES                               #
  276 ###############################################################################
  277 */
  278 
  279 
  280 /******************************************************************************
  281 * PROCEDURE prime_implicants: Generates complete list of PIs                  *
  282 *******************************************************************************/
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 6     
  283 prime_implicants: PROCEDURE;
  284 
  285 DECLARE (i, j, term_i, term_j, i_eqv_j, vertex, p, m) FIXED BINARY,
  286         (all_vertices_contained, covered) BIT ALIGNED;
  287 
  288      /* generate the prime implicants */
  289      num_pis = 0;
  290      DO i = 1 TO num_terms;
  291           DO j = num_terms TO i BY -1;
  292           /* choose the pair (i,j) */
  293           term_i = term(i); term_j = term(j);
  294           /* is (i,j) a cell? */
  295           IF (term_i & term_j) = term_i THEN DO;
  296                /* are all the vertices of (i,j) in the function? */
  297                i_eqv_j = equivalent(term_i, term_j);
  298                all_vertices_contained = $true; m = i + 1;
  299                DO vertex = term_i + 1 TO term_j - 1 WHILE (all_vertices_contained);
  300                     IF (i_eqv_j & vertex) = term_i THEN DO;
  301                          DO WHILE (term(m) < vertex); m = m + 1; END;
  302                          all_vertices_contained = (term(m) = vertex);
  303                          m = m + 1;
  304                          END;
  305                     END;
  306                IF all_vertices_contained THEN DO;
  307                     /* is (i,j) covered by an entry in the p.i. table? */
  308                     covered = $false;
  309                     IF num_pis ^= 0 THEN DO p = 1 TO num_pis WHILE (^ covered);
  310                          IF term_j <= p_i($high,p) THEN
  311                               IF (p_i($low,p) & term_i) = p_i($low,p) THEN
  312                                    covered = ((term_j & p_i($high,p)) = term_j);
  313                               END;
  314                     IF ^ covered THEN DO;
  315                          num_pis = num_pis + 1;
  316                          p_i($low,num_pis) = term_i;
  317                          p_i($high,num_pis) = term_j;
  318                          END;
  319                     END;
  320                END;
  321           END;
  322      END;
  323 
  324 END prime_implicants;
  325 
  326 
  327 /******************************************************************************
  328 * PROCEDURE p_i_chart: Makes a PI chart as a bit array                        *
  329 *******************************************************************************/
  330 p_i_chart: PROCEDURE;
  331      DECLARE (m, p) FIXED BINARY;
  332      /* generate the prime implicant chart */
  333      DO m = 1 TO num_minterms;
  334           DO p = 1 TO num_pis;
  335                pi_covers_minterm(p,m) = ((p_i($low,p) & minterm(m)) = p_i($low, p)
  336                                         & (minterm(m) & p_i($high,p)) = minterm(m));
  337                END;
  338           END;
  339 END p_i_chart;
  340 
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 7     
  341 
  342 /******************************************************************************
  343 * PROCEDURE p_i_status: Categorises PIs as essential/nonessential/redundant   *
  344 *******************************************************************************/
  345 p_i_status: PROCEDURE;
  346      DECLARE (m, p, epi, num_covers) FIXED BINARY;
  347 
  348      /* initialise all p.i. status to redundant */
  349      DO p = 1 TO num_pis; p_i($status,p) = $redundant; END;
  350      /* find essential p.i.s */
  351      DO m = 1 TO num_minterms;
  352           num_covers = 0;
  353           DO p = 1 TO num_pis;
  354                IF pi_covers_minterm(p,m) THEN DO;
  355                     epi = p;
  356                     num_covers = num_covers + 1;
  357                     END;
  358                END;
  359           IF num_covers = 1 THEN p_i($status, epi) = $essential;
  360           END;
  361      /* find minterms covered by essential p.i.s */
  362      num_covers = 0;
  363      DO m = 1 TO num_minterms;
  364           epi_covers_minterm(m) = $false;
  365           DO p = 1 TO num_pis WHILE (^ epi_covers_minterm(m));
  366                IF p_i($status,p) = $essential & pi_covers_minterm(p,m) THEN DO;
  367                     epi_covers_minterm(m) = $true;
  368                     num_covers = num_covers + 1;
  369                     END;
  370                END;
  371           END;
  372      /* determine whether 1 solution or more */
  373      unique_solution = (num_covers = num_minterms);
  374      /* find non-essential p.i.s */
  375      IF ^ unique_solution THEN DO;
  376           DO m = 1 TO num_minterms;
  377                IF ^ epi_covers_minterm(m) THEN DO p = 1 TO num_pis;
  378                     IF p_i($status,p) = $redundant & pi_covers_minterm(p,m) THEN p_i($status,p) = $n
      on_essential;
  379                     END;
  380                END;
  381           /* make a table of n.e.p.i. pointers */
  382           num_ne_pis = 0;
  383           DO p = 1 TO num_pis;
  384                IF p_i($status,p) = $non_essential THEN DO;
  385                     num_ne_pis = num_ne_pis + 1;   ne_pi(num_ne_pis) = p;
  386                     END;
  387                END;
  388           END;
  389 
  390 END p_i_status;
  391 
  392 
  393 /******************************************************************************
  394 * PROCEDURE p_i_cost: Calculates literal costs of PIs                         *
  395 *******************************************************************************/
  396 p_i_cost: PROCEDURE;
  397      DECLARE (p, l, b, literals) FIXED BINARY;
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 8     
  398      DO p = 1 TO num_pis;
  399           p_i($cost,p) = 0;  b = 1;
  400           literals = equivalent(p_i($low,p),p_i($high,p));
  401           DO l = 1 TO function_order;
  402                IF (b & literals) ^= 0 THEN p_i($cost,p) = p_i($cost,p) + 1;
  403                b = b + b;
  404                END;
  405           END;
  406 END p_i_cost;
  407 
  408 
  409 /******************************************************************************
  410 * PROCEDURE irredundand_nepi_sums: Performs algebraic conversion of           *
  411 *                                  nonessential PI product-of-sums to         *
  412 *                                  sum-of-products                            *
  413 *******************************************************************************/
  414 irredundant_nepi_sums: PROCEDURE;
  415      DECLARE (m, p, c, s, num_umin_nepis) FIXED BINARY,
  416              (b, umin_nepis(256)) BIT (96) ALIGNED,
  417              redundant_sums BIT ALIGNED;
  418 
  419      /* make an array of bit strings holding non-ess p.i. coverage of uncovered minterms */
  420      num_umin_nepis = 0;
  421      DO m = 1 TO num_minterms;
  422           IF ^ epi_covers_minterm(m) THEN DO;
  423               num_umin_nepis = num_umin_nepis + 1;
  424               umin_nepis(num_umin_nepis) = 0;
  425               b = BIT(0,95) || '1'B;
  426               DO p = 1 TO num_ne_pis;
  427                   IF pi_covers_minterm(ne_pi(p),m) THEN
  428                       umin_nepis(num_umin_nepis) = umin_nepis(num_umin_nepis) | b;
  429                   b = SUBSTR(b, 2);
  430                   END;
  431               END;
  432           END;
  433 
  434      /* first pass - i.n.e.p.i. sums are those covering 1st uncovered minterm */
  435      num_inepi_sums = 0;  b = BIT(0,95) || '1'B;
  436      DO p = 1 TO num_ne_pis;
  437           /* if 1st uncovered minterm is covered by this n.e.p.i. then ... */
  438           IF (umin_nepis(1) & b) ^= BIT(0,96) THEN DO;
  439               /* ... this sum is initially this n.e-p.i. */
  440               num_inepi_sums = num_inepi_sums + 1; inepi_sum(num_inepi_sums) = b;
  441               END;
  442           b = SUBSTR(b, 2);
  443           END;
  444 
  445      /* continue by repeatediy combining with n.e.p.i. terms of succeeding minterms algebraically */
      
  446      DO m = 2 TO num_umin_nepis;
  447           /* initialise cover counter and n.e.p.i. pointer */
  448           c = -1;  b = BIT(0,95) || '1'B;
  449           /* add each n.e.p.i. covering this minterm successively to each sum */
  450           DO p = 1 TO num_ne_pis;
  451               /* if this n.e.p.i. covers this minterm then ... */
  452               IF (umin_nepis(m) & b) ^= BIT(0, 96) THEN DO;
  453                   /* ... increment cover counter for this minterm ... */
  454                   c = c + 1;
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 9     
  455                   /* ... step through the sums for this cover ... */
  456                   DO s = c * num_inepi_sums + 1 TO (c + 1) * num_inepi_sums;
  457                       /* ... make a copy of current sums for next cover ... */
  458                       inepi_sum(s + num_inepi_sums) = inepi_sum(s);
  459                       /* ... add this cover to the sum */
  460                       inepi_sum(s) = inepi_sum(s) | b;
  461                       END;
  462                   END;
  463               b = SUBSTR(b, 2);
  464               END;
  465           /* calculate the new number of sums resulting from above */
  466           num_inepi_sums = (c + 1) * num_inepi_sums;
  467           /* some sums may cover others so minimise by nulling redundant sums */
  468           redundant_sums = $false;
  469           DO s = 1 TO num_inepi_sums;
  470               IF inepi_sum(s) ^= BIT(0,96) THEN DO c = 1 TO num_inepi_sums;
  471                   IF c ^= s & inepi_sum(c) ^= BIT(0,96) & (inepi_sum(s) & inepi_sum(c)) = inepi_sum(
      s) THEN DO;
  472                       inepi_sum(c) = BIT(0, 96);
  473                       redundant_sums = $true;
  474                       END;
  475                   END;
  476               END;
  477           /* remove redundant sums and calculate the new number of sums Tesulting */
  478           IF redundant_sums THEN CALL remove_redundant_sums;
  479           END;
  480 
  481 END irredundant_nepi_sums;
  482 
  483 
  484 /******************************************************************************
  485 * PROCEDURE minimum_cost_solution: Finds set of minimum literal cost          *
  486 *                                  nonessential PI sums                       *
  487 *******************************************************************************/
  488 minimum_cost_solution: PROCEDURE;
  489      DECLARE (s, min_cost, sum_cost(1000)) FIXED BINARY,
  490              redundant_sums BIT ALIGNED;
  491 
  492      /* make a table of irredundant n.e.p.i. literal costs */
  493      DO s = 1 TO num_inepi_sums;
  494           sum_cost(s) = nonessential_cost(s);
  495           END;
  496      /* find the minimum cost */
  497      min_cost = sum_cost(1);
  498      DO s = 2 TO num_inepi_sums;
  499           IF sum_cost(s) < min_cost THEN min_cost = sum_cost(s);
  500           END;
  501      /* remove all but minimum cost sums */
  502      DO s = 1 TO num_inepi_sums;
  503           IF sum_cost(s) > min_cost THEN DO;
  504                inepi_sum(s) = BIT(0, 96);
  505                redundant_sums = $true;
  506                END;
  507           END;
  508      IF redundant_sums THEN CALL remove_redundant_sums;
  509 
  510 END minimum_cost_solution;
  511 
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 10    
  512 
  513 /******************************************************************************
  514 * PROCEDURE ammend_p_i_status: Recategorises some nonessential PIs as         *
  515 *                              minimum cost essential/minimum cost redundant  *
  516 *******************************************************************************/
  517 ammend_p_i_status: PROCEDURE;
  518      DECLARE (ess_pis, red_pis, b) BIT (96) ALIGNED,
  519              s FIXED BINARY;
  520 
  521      /* find n.e.p.i.s common to each sum and those which have been removed */
  522      ess_pis = inepi_sum(1);
  523      red_pis = ^ ess_pis;
  524      DO s = 2 TO num_inepi_sums;
  525           ess_pis = ess_pis & inepi_sum(s);
  526           red_pis = red_pis & ^ inepi_sum(s);
  527           END;
  528      /* remove common n.e.p.i.s from the sums - these are minimum-cost essential */
  529      DO s = 1 TO num_inepi_sums;
  530           inepi_sum(s) = inepi_sum(s) & ^ ess_pis;
  531           END;
  532      /* ammend p.i. status table to show minimum-cost essential/redundant p.i.s */
  533      b = BIT(0,95) || '1'B;
  534      DO s = 1 TO num_ne_pis;
  535           IF (ess_pis & b) ^= BIT(0,96) THEN p_i($status,ne_pi(s)) = $min_cost_essential;
  536           ELSE IF (red_pis & b) ^= BIT(0,96) THEN p_i($status, ne_pi(s)) = $min_cost_redundant;
  537           b = SUBSTR(b,2);
  538           END;
  539 
  540 END ammend_p_i_status;
  541 
  542 
  543 /******************************************************************************
  544 * PROCEDURE remove_redundant_sums: Cleans up irredundant nonessential PI      *
  545 *                                  sum-of-products array                      *
  546 *******************************************************************************/
  547 remove_redundant_sums: PROCEDURE;
  548      DECLARE (i, j) FIXED BINARY, sum_moved BIT ALIGNED;
  549 
  550      DO i = 1 TO num_inepi_sums;
  551           IF inepi_sum(i) = BIT(0,96) THEN DO;
  552                sum_moved = $false;
  553                DO j = i + 1 TO num_inepi_sums WHILE (^ sum_moved);
  554                     IF inepi_sum(j) ^= BIT(0,96) THEN DO;
  555                          inepi_sum(i) = inepi_sum(j);  inepi_sum(j) = BIT(0, 96);
  556                          sum_moved = $true;
  557                          END;
  558                     END;
  559                IF ^ sum_moved THEN DO;
  560                     num_inepi_sums = i - 1;
  561                     RETURN;
  562                     END;
  563                END;
  564           END;
  565 
  566 END remove_redundant_sums;
  567 
  568 
  569 /******************************************************************************
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 11    
  570 * PROCEDURE essential_cost: Returns literal cost of all essential PIs         *
  571 *******************************************************************************/
  572 essential_cost: PROCEDURE RETURNS (FIXED BINARY);
  573      DECLARE (p, e_cost) FIXED BINARY;
  574      e_cost = 0;
  575      DO p = 1 TO num_pis;
  576           IF p_i($status,p) > $non_essential THEN e_cost = e_cost + p_i($cost,p);
  577           END;
  578      RETURN (e_cost);
  579 END essential_cost;
  580 
  581 
  582 /******************************************************************************
  583 * PROCEDURE nonessential_cost: Returns literal cost of all nonessential PIs   *
  584 *                              in specified sum-of-product sum                *
  585 *******************************************************************************/
  586 nonessential_cost: PROCEDURE (s) RETURNS (FIXED BINARY);
  587      DECLARE (s, p, ne_cost) FIXED BINARY,
  588               b BIT (96) ALIGNED;
  589      ne_cost = 0;  b = BIT(0,95) || '1'B;
  590      DO p = 1 TO num_ne_pis;
  591           IF (inepi_sum(s) & b) ^= BIT(0,96) THEN ne_cost = ne_cost + p_i($cost,ne_pi(p));
  592           b = SUBSTR(b, 2);
  593           END;
  594      RETURN (ne_cost);
  595 END nonessential_cost;
  596 
  597 
  598 /******************************************************************************
  599 * PROCEDURE run_minimisation: Performs minimisation of switching function     *
  600 *******************************************************************************/
  601 run_minimisation: PROCEDURE;
  602      function_order = LOG2(term(num_terms)) + 1;
  603      PUT SKIP LIST ('(finding prime implicants)');
  604      CALL prime_implicants; /* generates complete set of prime implicants */
  605      CALL p_i_chart; /* generates array of pi coverage of minterms */
  606      CALL p_i_status; /* gives ess/noness/red status to p.i.s & e.p.i. cover status to minterms & de
      cides if unique */
  607      CALL p_i_cost; /* finds literal costs of p.i.s */
  608      IF ^ unique_solution THEN DO;
  609           PUT SKIP LIST ('(finding minimum cost solution)');
  610           CALL irredundant_nepi_sums; /* generate irredundant n.e.p.i. sums to cover remaining minte
      rms */
  611           CALL minimum_cost_solution; /* finds lowest literal cost solutions from irredundant n.e.p.
      i. sums */
  612           CALL ammend_p_i_status; /* gives min-cost-ess/min-cost-red status to n.e.p.i.s */
  613           END;
  614      solution_cost = essential_cost();
  615      IF ^ unique_solution THEN solution_cost = solution_cost + nonessential_cost(1);
  616 END run_minimisation;
  617 
  618 
  619 /*
  620 ###############################################################################
  621 #                          OUTPUT PROCEDURES                                  #
  622 ###############################################################################
  623 */
  624 
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 12    
  625 
  626 /******************************************************************************
  627 * PROCEDURE print_header_message: Prints title and version no to screen/file  *
  628 *******************************************************************************/
  629 print_header_message: PROCEDURE (f);
  630      DECLARE f FILE VARIABLE;
  631      PUT FILE (f) EDIT ('BOOLEAN MINIMISATION  ', version, COPY('=',26))
  632           (COLUMN(20),A,A,SKIP,COLUMN(20),A);
  633 END print_header_message;
  634 
  635 
  636 /******************************************************************************
  637 * PROCEDURE print_menu: Prints programme menu                                 *
  638 *******************************************************************************/
  639 print_menu: PROCEDURE;
  640      CALL print_header_message(SYSPRINT);
  641      PUT SKIP(3) LIST ('  A utility for the logical minimisation of boolean functions.');
  642      PUT SKIP(4) EDIT ('Menu',
  643                        '----',
  644                    '1. Enter data',
  645                    '2. Minimise',
  646                    '3. File results',
  647                    '4. Information',
  648                    '5. Quit',
  649                    'Enter 1-5 --> ')
  650           (COLUMN(28),A,SKIP,COLUMN(28),A,SKIP(2),5(COLUMN(24),A,SKIP),SKIP,COLUMN(24),A);
  651 END print_menu;
  652 
  653 
  654 /******************************************************************************
  655 * PROCEDURE print_input_data: Prints minterms and don't cares to screen/file  *
  656 *******************************************************************************/
  657 print_input_data: PROCEDURE (f);
  658      DECLARE f FILE VARIABLE, t FIXED BINARY;
  659      /* list the minterms */
  660      PUT FILE(f) SKIP(3) LIST ('Minterms:');
  661      IF num_minterms = 0 THEN PUT FILE(f) SKIP LIST ('*** none ***');
  662      ELSE PUT FILE(f) SKIP EDIT ((trim(minterm(t)) DO t = 1 TO num_minterms)) (A,X(1));
  663      /* list the dont-cares */
  664      PUT FILE(f) SKIP(3) LIST ('Don''t cares:');
  665      IF num_dont_cares = 0 THEN PUT FILE(f) SKIP LIST ('*** none ***');
  666      ELSE PUT FILE(f) SKIP EDIT ((trim(dont_care(t)) DO t = 1 TO num_dont_cares)) (A, X(1));
  667 END print_input_data;
  668 
  669 
  670 /******************************************************************************
  671 * PROCEDURE output_results: Prints minimisation results to screen/file        *
  672 *******************************************************************************/
  673 output_results: PROCEDURE (f);
  674      DECLARE f FILE VARIABLE;
  675 
  676      /* print header message */
  677      CALL print_header_message(f);
  678 
  679      /* list minterms and dont-cares */
  680      CALL print_input_data(f);
  681 
  682      /* print the function order */
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 13    
  683      PUT FILE(f) SKIP(3) EDIT ('The function order is ',trim(function_order)) (A);
  684 
  685      /* list the prime implicants and associated qualities */
  686      cell: PROCEDURE (p) RETURNS (CHARACTER (10) VARYING);
  687           DECLARE p FIXED BINARY;
  688           RETURN (trim(p_i($low,p)) || ',' || trim(p_i($high, p)));
  689      END cell;
  690      literals: PROCEDURE (p) RETURNS (CHARACTER (10) VARYING);
  691           DECLARE (p, l, b) FIXED BINARY, lits CHARACTER (10) VARYING;
  692           lits = ''; b = 1;
  693           DO l = 1 TO function_order;
  694                IF (equivalent(p_i($low,p),p_i($high,p)) & b) ^= 0 THEN
  695                     IF (p_i($low,p) & b) ^= 0 THEN lits = '1' || lits;
  696                     ELSE lits = '0' || lits;
  697                ELSE lits = '-' || lits;
  698                b = b + b;
  699                END;
  700           RETURN (lits);
  701      END literals;
  702      BEGIN;
  703           DECLARE p FIXED BINARY;
  704           PUT FILE(f) SKIP(3) LIST ('Prime Implicants:');
  705           PUT FILE(f) SKIP EDIT (' p.i.','cell','literals','cost','status')
  706                (A,COLUMN(11),A,COLUMN(25),A,COLUMN(40),A,COLUMN(50),A);
  707           DO p = 1 TO num_pis;
  708                PUT FILE(f) SKIP EDIT (p,cell(p),literals(p),p_i($cost,p),pi_status(p_i($status,p)))
  709                     (F(4),COLUMN(11),A,COLUMN(25),A,COLUMN(40),F(3),COLUMN(50),A);
  710                END;
  711           END;
  712 
  713      /* abort if no minterms */
  714      IF num_minterms = 0 THEN RETURN;
  715 
  716      /* print the prime implicant chart */
  717      tick: PROCEDURE (b) RETURNS (CHARACTER);
  718           DECLARE b BIT ALIGNED;
  719           IF b THEN RETURN ('*');
  720           RETURN (' ');
  721      END tick;
  722      BEGIN;
  723           DECLARE (m, b, p, num_blocks, mins_per_block) FIXED BINARY;
  724           PUT FILE(f) SKIP(3) LIST ('Prime Implicant Chart:');
  725           num_blocks = CEIL(DECIMAL(num_minterms) / 19.0);
  726           mins_per_block = CEIL(DECIMAL(num_minterms) / DECIMAL(num_blocks));
  727           DO b = 1 TO num_blocks;
  728                PUT FILE(f) SKIP LIST ('      minterm -->');
  729                PUT FILE(f) SKIP EDIT
  730                     (' p.i.',(minterm(m)
  731                     DO m = (b-1)*mins_per_block+1 TO MIN(num_minterms,b*mins_per_block))) (A,F(3),18
      (F(4)));
  732                DO p = 1 TO num_pis;
  733                     IF p_i($status,p) > $redundant THEN PUT FILE(f) SKIP EDIT
  734                          (p, (tick(pi_covers_minterm(p,m))
  735                          DO m = (b-1)*mins_per_block+1 TO MIN(num_minterms,b*mins_per_block))) (F(4)
      ,19(X(3),A));
  736                     END;
  737                END;
  738           END;
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 14    
  739      
  740      /* print the solution */
  741      BEGIN;
  742           DECLARE (p, s) FIXED BINARY, or CHARACTER (2) VARYING, all_covered BIT ALIGNED, b BIT (96)
       ALIGNED;
  743           IF unique_solution THEN PUT FILE(f) SKIP(3) LIST ('Unique Solution:');
  744           ELSE PUT FILE(f) SKIP(3) LIST ('Minimum Cost Solution:');
  745           PUT FILE(f) SKIP EDIT (' F = ') (A);
  746           /* essentials first */
  747           or = '';
  748           DO p = 1 TO num_pis;
  749                IF p_i($status,p) > $non_essential THEN DO;
  750                     PUT FILE(f) EDIT (or, trim(p)) (A);
  751                     or = '+';
  752                     END;
  753                END;
  754           /* if these do not cover all minterms then ... */
  755           all_covered = $true;
  756           IF ^ unique_solution THEN DO s = 1 TO num_minterms WHILE (all_covered);
  757                all_covered = $false;
  758                DO p = 1 TO num_pis WHILE (^ all_covered);
  759                     IF p_i($status,p) > $non_essential THEN
  760                          all_covered = pi_covers_minterm(p,s);
  761                     END;
  762                END;
  763           /* ... minimum cost nonessentials */
  764           IF ^ all_covered THEN DO;
  765                PUT FILE(f) EDIT (or) (A);
  766                DO s = 1 TO num_inepi_sums;
  767                     PUT FILE(f) EDIT ('(') (A);
  768                     or = ''; b = BIT(0,95) || '1'B;
  769                     DO p = 1 TO num_ne_pis;
  770                          IF (inepi_sum(s) & b) ^= BIT(0,96) THEN DO;
  771                               PUT FILE(f) EDIT (or,trim(ne_pi(p))) (A);
  772                               or = '+';
  773                               END;
  774                          b = SUBSTR(b,2);
  775                          END;
  776                     PUT FILE(f) EDIT (')') (A);
  777                     END;
  778                PUT FILE(f) SKIP LIST ('(parenthesised expressions are alternatives)');
  779                END;
  780           END;
  781 
  782      /* print the literal cost of the solution */
  783      PUT FILE(f) SKIP(3) EDIT ('Cost = ',trim(solution_cost),' literals')  (A);
  784 
  785 END output_results;
  786 
  787 
  788 /******************************************************************************
  789 * PROCEDURE print information: Prints information about the pregramme         *
  790 *******************************************************************************/
  791 print_information: PROCEDURE;
  792      PUT SKIP(2) EDIT (
  793      '  This utility determines the minimal 2-level solution for a Boolean switching',
  794      'function. This function must be fully specified as minterm and don''t care',
  795      'arrays. The maximum number of input variables is 8. Data is entered as decimal',
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 15    
  796      'values in the range 0 to 255 in any order. Ranges of values may be entered by',
  797      'using a hyphen. e.g. 10-15. This data is sorted by the programme. If any value',
  798      'is specified as both a minterm and a don''t care term then it is assumed to be',
  799      'a minterm. Values which are out of range are ignored.',
  800      '  Minimisation is done by first finding the prime implicants of the function',
  801      'and then reducing the PI chart. Prime implicants are found by taking pairs of',
  802      'terms (minterms or don''t cares) and testing to see if they form a cell. If they',
  803      'do then a search is made to determine whether all the vertices of the cell are',
  804      'either minterms or don''t cares. If so the cell is tested for containment by',
  805      'any PI already found. If it is not contained then this cell is a PI. PI chart',
  806      'reduction is done using the algebraic method after removing essential PIs and',
  807      'the minterms they cover') (SKIP,A);
  808 END print_information;
  809 
  810 
  811 /*
  812 ###############################################################################
  813 #                            MAIN PROGRAMME                                   #
  814 ###############################################################################
  815 */
  816 
  817 
  818 /* initialisation */
  819 num_minterms = 0;  num_dont_cares = 0;  num_terms = 0;
  820 new_data = $true;
  821 
  822 /* main loop */
  823 DO WHILE ($true);
  824      /* get menu selection */
  825      menu:
  826      PUT SKIP(3);
  827      CALL print_menu;
  828      SELECT (menu_selection());
  829 
  830      WHEN (1) BEGIN; /* enter data */
  831           CALL enter_data;
  832           GO TO menu; END;
  833 
  834      WHEN (2) BEGIN; /* minimise */
  835           IF num_terms < 2 THEN
  836                PUT SKIP LIST ('Insufficient data - cannot minimise.');
  837           ELSE DO;
  838                IF new_data THEN CALL run_minimisation;
  839                PUT SKIP(2);
  840                CALL output_results(SYSPRINT);
  841                new_data = $false;
  842                CALL continue_prompt;
  843                END;
  844           GO TO menu; END;
  845 
  846      WHEN (3) BEGIN; /* file results */
  847           IF ^ new_data THEN DO;
  848                OPEN FILE(results_file) TITLE ('bool_min.txt') LINESIZE(80) STREAM OUTPUT PRINT;
  849                CALL output_results(results_file);
  850                PUT PAGE FILE(results_file);
  851                CLOSE FILE(results_file);
  852                PUT SKIP LIST ('Results appended to file BOOL_MIN.');
  853                END;
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Source Listing                                           Page 16    
  854           ELSE PUT SKIP LIST ('No results to file.');
  855           GO TO menu; END;
  856 
  857      WHEN (4) BEGIN; /* information */
  858           CALL print_information;
  859           CALL continue_prompt;
  860           GO TO menu; END;
  861 
  862      WHEN (5) /* quit */
  863           STOP;
  864      END;
  865   END;
  866 END BSc_project;
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Procedure Map                                            Page 17    
  Offset  Line Statement type             Offset  Line Statement type             Offset  Line Statement type           
      08    10 PROCEDURE                BSC_PROJECT
      3A    38 DCL                            3A    40 DCL                      

      3F    55 PROCEDURE                EQUIVALENT
      56    57 RETURN                         B4    58 END                      

      C4    64 PROCEDURE                TRIM
      D5    66 RETURN                       01DA    67 END                      

    01EA    74 PROCEDURE                SORT_DATA
    0200    78 DO                           024B    79 Assignment                   026D    80 Assignment               
    0279    81 END                          0284    82 DO                           02CF    83 Assignment               
    02FA    84 Assignment                   030F    85 END                          031A    86 Assignment               
    0331    89 Assignment                   0335    90 DO                           034B    91 Assignment               
    034F    91 Assignment                   0353    92 DO                           03AC    94 IF                       
    03EF    94 DO                           03EF    95 Assignment                   0414    96 Assignment               
    042E    97 Assignment                   043A    98 Assignment                   043E    99 END                      
    0444   100 Assignment                   0448   101 DO                           049B   102 IF                       
    04B5   102 Assignment                   04B9   104 IF                           04E4   104 DO                       
    04E4   105 Assignment                   04F9   105 Assignment                   051C   105 Assignment               
    0532   106 Assignment                   0541   106 Assignment                   0559   106 Assignment               
    0569   107 Assignment                   056D   108 END                          056D   110 ELSE                     
    0572   110 IF                           059D   110 DO                           059D   111 Assignment               
    05C3   112 Assignment                   05E9   113 Assignment                   0604   114 Assignment               
    0610   115 Assignment                   0614   116 END                          0614   117 END                      
    0625   118 END                          0636   119 END                          0641   122 Assignment               
    064A   122 Assignment                   0653   123 DO                           069E   124 IF                       
    06B0   124 DO                           06B0   125 Assignment                   06BC   126 Assignment               
    06E1   127 END                          06E1   128 ELSE                         06E6   128 DO                       
    06E6   129 Assignment                   06F2   130 Assignment                   0717   131 END                      
    0717   132 END                          0725   133 END                      

    0735   146 PROCEDURE                MENU_SELECTION
    0750   148 DO                           0766   149 GET                          07E4   150 IF                       
    0831   150 DO                           0831   151 Assignment                   0878   152 IF                       
    0898   152 RETURN                       08AA   153 END                          08AA   154 END                      
    08B2   155 END                      

    08C2   161 PROCEDURE                CONTINUE_PROMPT
    08DE   162 PUT                          0957   163 GET                          09DB   164 END                      

    09EB   170 PROCEDURE                ENTER_DATA


    0A07   173 PROCEDURE                GET_INPUT_LIST
    0A22   178 Assignment                   0A2E   179 Assignment                   0A32   180 PUT                      
    0B37   184 DO                           0B4D   185 GET                          0BCB   186 IF                       
    0CAC   186 RETURN                       0CB1   187 ELSE                         0CB6   187 IF                       
    0D2A   187 DO                           0D2A   188 Assignment                   0D47   189 IF                       
    0D57   189 DO                           0D57   190 IF                           0D6D   190 DO                       
    0D6D   191 Assignment                   0D7C   192 Assignment                   0DD9   193 END                      
    0DD9   194 END                          0DD9   195 ELSE                         0DDE   195 IF                       
    0E07   195 DO                           0E07   196 Assignment                   0E89   196 IF                       
    0E99   196 Assignment                   0E9F   197 Assignment                   0F0D   197 IF                       
    0F1D   197 Assignment                   0F23   198 IF                           0F33   198 DO                       
    0F33   198 Assignment                   0F3E   198 Assignment                   0F46   198 Assignment               
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Procedure Map                                            Page 18    
    0F51   198 END                          0F51   199 DO                           0FAE   200 Assignment               
    0FBD   201 Assignment                   0FDE   202 END                          0FE6   203 END                      
    0FE9   204 END                          0FE9   205 ELSE                         0FF1   205 Assignment               
    0FFE   206 END                          1006   207 IF                           1010   207 PUT                      
    1081   208 END                          108C   210 DO                           10A2   211 PUT                      
    10FA   212 CALL                         111D   213 CALL                         1168   214 CALL                     
    11B3   215 PUT                          1344   222 Assignment                   1354   223 DO                       
    13A7   224 GET                          1425   225 Assignment                   14F0   226 END                      
    14FB   227 IF                           1539   227 RETURN                       153E   228 IF                       
    157C   228 DO                           157C   229 Assignment                   1585   229 Assignment               
    158E   230 END                          158E   231 IF                           168C   231 DO                       
    168C   232 CALL                         16AE   233 IF                           16EC   233 DO                       
    16EC   234 DO                           1731   235 Assignment                   175C   236 END                      
    1764   237 Assignment                   1778   238 END                          1778   239 ELSE                     
    177D   239 IF                           17BB   239 DO                           17BB   240 DO                       
    1800   241 Assignment                   1804   242 DO                           1853   243 IF                       
    187D   243 DO                           187D   244 Assignment                   1890   245 Assignment               
    1894   246 END                          1894   247 END                          189C   248 END                      
    18A7   249 END                          18A7   250 ELSE                         18AC   250 IF                       
    18EA   250 DO                           18EA   251 DO                           192F   252 Assignment               
    195A   253 END                          1962   254 Assignment                   1976   255 END                      
    1976   256 ELSE                         197B   256 DO                           197B   257 DO                       
    19C0   258 Assignment                   19C4   259 DO                           1A13   260 IF                       
    1A3D   260 DO                           1A3D   261 Assignment                   1A50   262 Assignment               
    1A54   263 END                          1A54   264 END                          1A5C   265 END                      
    1A67   266 END                          1A67   267 IF                           1A77   267 Assignment               
    1A7E   268 END                          1A81   269 END                          1A89   270 END                      

    1A99   283 PROCEDURE                PRIME_IMPLICANTS
    1AB6   289 Assignment                   1ABF   290 DO                           1B04   291 DO                       
    1B4B   293 Assignment                   1B60   293 Assignment                   1B75   295 IF                       
    1BA4   295 DO                           1BA4   297 Assignment                   1BDD   298 Assignment               
    1BE1   298 Assignment                   1BEA   299 DO                           1C3A   300 IF                       
    1C69   300 DO                           1C69   301 DO                           1C8C   301 Assignment               
    1C95   301 END                          1C9A   302 Assignment                   1CBE   303 Assignment               
    1CC7   304 END                          1CC7   305 END                          1CD2   306 IF                       
    1CDC   306 DO                           1CDC   308 Assignment                   1CE0   309 IF                       
    1CF0   309 DO                           1D3F   310 IF                           1D5C   311 IF                       
    1DA5   312 Assignment                   1DE8   313 END                          1DF3   314 IF                       
    1DFD   314 DO                           1DFD   315 Assignment                   1E09   316 Assignment               
    1E21   317 Assignment                   1E39   318 END                          1E39   319 END                      
    1E39   320 END                          1E39   321 END                          1E44   322 END                      
    1E4F   324 END                      

    1E5F   330 PROCEDURE                P_I_CHART
    1E75   333 DO                           1EBA   334 DO                           1EFF   335 Assignment               
    200B   337 END                          2016   338 END                          2021   339 END                      

    2031   345 PROCEDURE                P_I_STATUS
    2048   349 DO                           208D   349 Assignment                   20A0   349 END                      
    20A8   351 DO                           20ED   352 Assignment                   20F3   353 DO                       
    2138   354 IF                           2173   354 DO                           2173   355 Assignment               
    217B   356 Assignment                   2184   357 END                          2184   358 END                      
    218C   359 IF                           2199   359 Assignment                   21AC   360 END                      
    21B7   362 Assignment                   21BD   363 DO                           2202   364 Assignment               
    2245   365 DO                           22B3   366 IF                           230E   366 DO                       
    230E   367 Assignment                   2351   368 Assignment                   235A   369 END                      
    235D   370 END                          2368   371 END                          2373   373 Assignment               
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Procedure Map                                            Page 19    
    238F   375 IF                           239C   375 DO                           239C   376 DO                       
    23E1   377 IF                           240A   377 DO                           244F   378 IF                       
    24AA   378 Assignment                   24C0   379 END                          24CB   380 END                      
    24D6   382 Assignment                   24DF   383 DO                           2524   384 IF                       
    253E   384 DO                           253E   385 Assignment                   254A   385 Assignment               
    2562   386 END                          2562   387 END                          256A   388 END                      
    256A   390 END                      

    257A   396 PROCEDURE                P_I_COST
    258F   398 DO                           25D4   399 Assignment                   25E7   399 Assignment               
    25ED   400 Assignment                   2640   401 DO                           2688   402 IF                       
    26B4   402 Assignment                   26D7   403 Assignment                   26E5   404 END                      
    26F0   405 END                          26FB   406 END                      

    270B   414 PROCEDURE                IRREDUNDANT_NEPI_SUMS
    272D   420 Assignment                   2733   421 DO                           277E   422 IF                       
    27A7   422 DO                           27A7   423 Assignment                   27B0   424 Assignment               
    27CF   425 Assignment                   2867   426 DO                           28B2   427 IF                       
    28FA   428 Assignment                   297B   429 Assignment                   29AA   430 END                      
    29B8   431 END                          29B8   432 END                          29C6   435 Assignment               
    29CF   435 Assignment                   2A67   436 DO                           2AB2   438 IF                       
    2B3B   438 DO                           2B3B   440 Assignment                   2B47   440 Assignment               
    2B6F   441 END                          2B75   442 Assignment                   2BA4   443 END                      
    2BB2   446 DO                           2BFA   448 Assignment                   2C00   448 Assignment               
    2C98   450 DO                           2CE3   452 IF                           2D74   452 DO                       
    2D74   454 Assignment                   2D7D   456 DO                           2DD8   458 Assignment               
    2E0C   460 Assignment                   2E95   461 END                          2EA3   462 END                      
    2EA9   463 Assignment                   2ED8   464 END                          2EE9   466 Assignment               
    2EFD   468 Assignment                   2F04   469 DO                           2F4F   470 IF                       
    2F91   470 DO                           2FDC   471 IF                           30D1   471 DO                       
    30D1   472 Assignment                   310E   473 Assignment                   3115   474 END                      
    311B   475 END                          312F   476 END                          3140   478 IF                       
    314D   478 CALL                         3171   479 END                          317F   481 END                      

    318F   488 PROCEDURE                MINIMUM_COST_SOLUTION
    31B1   493 DO                           31FC   494 Assignment                   3239   495 END                      
    3244   497 Assignment                   324F   498 DO                           329A   499 IF                       
    32B4   499 Assignment                   32C6   500 END                          32D1   502 DO                       
    331C   503 IF                           3336   503 DO                           3336   504 Assignment               
    3373   505 Assignment                   337A   506 END                          337A   507 END                      
    3388   508 IF                           3395   508 CALL                         33B9   510 END                      

    33C9   517 PROCEDURE                AMMEND_P_I_STATUS
    33E7   522 Assignment                   33FC   523 Assignment                   3453   524 DO                       
    3498   525 Assignment                   350E   526 Assignment                   35CF   527 END                      
    35DA   529 DO                           361F   530 Assignment                   36FD   531 END                      
    3708   533 Assignment                   37A0   534 DO                           37E5   535 IF                       
    386B   535 Assignment                   388B   536 ELSE                         3890   536 IF                       
    3916   536 Assignment                   3942   537 Assignment                   3971   538 END                      
    397C   540 END                      

    398C   547 PROCEDURE                REMOVE_REDUNDANT_SUMS
    39AE   550 DO                           39F3   551 IF                           3A35   551 DO                       
    3A35   552 Assignment                   3A39   553 DO                           3A8B   554 IF                       
    3ACD   554 DO                           3ACD   555 Assignment                   3AFA   555 Assignment               
    3B37   556 Assignment                   3B3B   557 END                          3B41   558 END                      
    3B4C   559 IF                           3B56   559 DO                           3B56   560 Assignment               
    3B62   561 RETURN                       3B67   562 END                          3B67   563 END                      
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Procedure Map                                            Page 20    
    3B6D   564 END                          3B78   566 END                      

    3B88   572 PROCEDURE                ESSENTIAL_COST
    3BA3   574 Assignment                   3BA9   575 DO                           3BEE   576 IF                       
    3C08   576 Assignment                   3C23   577 END                          3C2B   578 RETURN                   
    3C3A   579 END                      

    3C4A   586 PROCEDURE                NONESSENTIAL_COST
    3C68   589 Assignment                   3C6E   589 Assignment                   3D06   590 DO                       
    3D4B   591 IF                           3DE1   591 Assignment                   3E0F   592 Assignment               
    3E3E   593 END                          3E49   594 RETURN                       3E58   595 END                      

    3E68   601 PROCEDURE                RUN_MINIMISATION
    3E85   602 Assignment                   3EF7   603 PUT                          3F68   604 CALL                     
    3F8B   605 CALL                         3FAE   606 CALL                         3FD1   607 CALL                     
    3FF4   608 IF                           4001   608 DO                           4001   609 PUT                      
    4072   610 CALL                         4095   611 CALL                         40B8   612 CALL                     
    40DB   613 END                          40DB   614 Assignment                   410C   615 IF                       
    4119   615 Assignment                   4164   616 END                      

    4174   629 PROCEDURE                PRINT_HEADER_MESSAGE
    4195   631 PUT                          4281   633 END                      

    4291   639 PROCEDURE                PRINT_MENU
    42A8   640 CALL                         42F2   641 PUT                          436B   642 PUT                      
    4528   651 END                      

    4538   657 PROCEDURE                PRINT_INPUT_DATA
    4555   660 PUT                          45CE   661 IF                           45DE   661 PUT                      
    464F   662 ELSE                         4654   662 PUT                          476B   664 PUT                      
    47E4   665 IF                           47F4   665 PUT                          4865   666 ELSE                     
    486A   666 PUT                          4981   667 END                      

    4991   673 PROCEDURE                OUTPUT_RESULTS
    49AC   677 CALL                         49D6   680 CALL                         4A00   683 PUT                      

    4AFC   686 PROCEDURE                CELL
    4B0D   688 RETURN                       4CA1   689 END                      

    4CB1   690 PROCEDURE                LITERALS
    4CC6   692 Assignment                   4CCC   692 Assignment                   4CD2   693 DO                       
    4D1D   694 IF                           4D9B   695 IF                           4DD9   695 Assignment               
    4E45   696 ELSE                         4E4A   696 Assignment                   4EB6   697 ELSE                     
    4EBB   697 Assignment                   4F2A   698 Assignment                   4F38   699 END                      
    4F43   700 RETURN                       4F5D   701 END                      

    4F68   702 BEGIN                    
    4F87   704 PUT                          5003   705 PUT                          5137   707 DO                       
    517F   708 PUT                          534C   710 END                          5357   711 END                      
    5361   714 IF                           5371   714 RETURN                   

    537B   717 PROCEDURE                TICK
    538C   719 IF                           539A   719 RETURN                       53AD   720 RETURN                   
    53C0   721 END                      

    53CB   722 BEGIN                    
    53EA   724 PUT                          5466   725 Assignment                   54E7   726 Assignment               
    5572   727 DO                           55B4   728 PUT                          5628   729 PUT                      
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                               Procedure Map                                            Page 21    
    574C   732 DO                           5794   733 IF                           57B1   733 PUT                      
    5976   736 END                          5981   737 END                          598C   738 END                      

    5996   741 BEGIN                    
    59B5   743 IF                           59C2   743 PUT                          5A3E   744 ELSE                     
    5A43   744 PUT                          5ABF   745 PUT                          5B43   747 Assignment               
    5B49   748 DO                           5B91   749 IF                           5BAE   749 DO                       
    5BAE   750 PUT                          5C9A   751 Assignment                   5CAA   752 END                      
    5CAA   753 END                          5CB5   755 Assignment                   5CB9   756 IF                       
    5CC6   756 DO                           5D18   757 Assignment                   5D1C   758 DO                       
    5D6E   759 IF                           5D8B   760 Assignment                   5DE6   761 END                      
    5DF1   762 END                          5DFC   764 IF                           5E06   764 DO                       
    5E06   765 PUT                          5E87   766 DO                           5ECF   767 PUT                      
    5F53   768 Assignment                   5F59   768 Assignment                   5FF1   769 DO                       
    6039   770 IF                           60D0   770 DO                           60D0   771 PUT                      
    61CC   772 Assignment                   61DC   773 END                          61E2   774 Assignment               
    6211   775 END                          621C   776 PUT                          62A0   777 END                      
    62AB   778 PUT                          631F   779 END                          631F   780 END                      
    6329   783 PUT                          644C   785 END                      

    645C   791 PROCEDURE                PRINT_INFORMATION
    647A   792 PUT                          676B   808 END                          6776   819 Assignment               
    677C   819 Assignment                   6782   819 Assignment                   6788   820 Assignment               
    678F   823 DO                           67AB   825 PUT                          6809   827 CALL                     
    682B   828 SELECT                       685F   830 WHEN                     

    686C   830 BEGIN                    
    688B   831 CALL                         68AE   832 GO                           68BC   832 END                      
    68C6   834 WHEN                     

    68DE   834 BEGIN                    
    68FD   835 IF                           690D   836 PUT                          697E   837 ELSE                     
    6983   837 DO                           6983   838 IF                           6990   838 CALL                     
    69B3   839 PUT                          6A0B   840 CALL                         6A55   841 Assignment               
    6A5C   842 CALL                         6A7F   843 END                          6A7F   844 GO                       
    6A8D   844 END                          6A97   846 WHEN                     

    6AAF   846 BEGIN                    
    6ACE   847 IF                           6ADB   847 DO                           6ADB   848 OPEN                     
    6B4F   849 CALL                         6B99   850 PUT                          6BE9   851 CLOSE                    
    6C39   852 PUT                          6CAA   853 END                          6CAA   854 ELSE                     
    6CAF   854 PUT                          6D20   855 GO                           6D2E   855 END                      
    6D38   857 WHEN                     

    6D50   857 BEGIN                    
    6D6F   858 CALL                         6D92   859 CALL                         6DB5   860 GO                       
    6DC3   860 END                          6DCD   862 WHEN                         6DE5   863 STOP                     
    6DF2   864 END                          6E11   865 END                          6E1C   866 END                      
    6E21   866 Initialization           
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                  Symbol Table and Cross-Reference Listing                              Page 22    
ACTION               171  Char(30) Var                                          [ DSA-'40'x(32) ]
                            222   223   224   225   227   228   231   233   239   250 
ALL_COVERED          742  Bit(1) Aligned                                        [ DSA-'29'x(1) ]
                            755   756   757   758   760   764 
ALL_VERTICES_CONTAINED
                     286  Bit(1) Aligned                                        [ DSA-'31'x(1) ]
                            298   299   302   306 
AMMEND_P_I_STATUS    517  Entry                                                 [ Code+'33DB'x ]
                            612 
B                     75  Bit(1) Aligned                                        [ DSA-'27'x(1) ]
                            106 
B                    397  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            399   402   403 
B                    416  Bit(96) Aligned                                       [ DSA-'36'x(12) ]
                            425   428   429   435   438   440   442   448   452   460 
                            463 
B                    518  Bit(96) Aligned                                       [ DSA-'44'x(12) ]
                            533   535   536   537 
B                    588  Bit(96) Aligned                                       [ DSA-'30'x(12) ]
                            589   591   592 
B                    691  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            692   694   695   698 
B                    718  Bit(1) Aligned Parameter                              [ Loc @DSA+'08'x(1) ]
                            719 
B                    723  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            727   729   733 
B                    742  Bit(96) Aligned                                       [ DSA-'35'x(12) ]
                            768   770   774 
BINARY                27  Builtin
                            151   192   196   197 
BIT                   27  Builtin
                            425   435   438   448   452   470   471   472   504   533 
                            535   536   551   554   555   589   591   768   770 
BSC_PROJECT           10  Entry External Options(Main )                         [ Code+'15'x ]
C                    415  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            448   454   456   466   470   471   472 
CEIL                  27  Builtin
                            725   726 
CELL                 686  Entry                                                 [ Code+'4B01'x ]
                            708 
CHARACTER             27  Builtin
                             66 
CONTINUE              39  Char(30) Var                                          [ DSA-'A5B0'x(32) ]
                            163 
CONTINUE_PROMPT      161  Entry                                                 [ Code+'08D2'x ]
                            842   859 
COPY                  27  Builtin
                            631 
COVERED              286  Bit(1) Aligned                                        [ DSA-'32'x(1) ]
                            308   309   312   314 
DECIMAL               27  Builtin
                            725   726 
DELETED              171  Bit(1) Aligned                                        [ DSA-'41'x(1) ]
                            241   242   245   258   259   262 
DONT_CARE             30  (512) Fixed Bin(15,0) Aligned                         [ DSA-'082C'x(2) ]
                             83   130   252   260   261   666 
ENTER_DATA           170  Entry                                                 [ Code+'09F6'x ]
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                  Symbol Table and Cross-Reference Listing                              Page 23    
                            831 
EPI                  346  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            355   359 
EPI_COVERS_MINTERM    34  (256) Bit(1) Static                                   [ BSS+'02'x.0(0.1) ]
                            364   365   367   377   422 
EQUIVALENT            55  Entry                                                 [ Code+'4A'x ]
                            297   400   694 
ESSENTIAL_COST       572  Entry                                                 [ Code+'3B97'x ]
                            614 
ESS_PIS              518  Bit(96) Aligned                                       [ DSA-'2C'x(12) ]
                            522   523   525   530   535 
EXCESS_TERMS          75  Bit(1) Aligned                                        [ DSA-'29'x(1) ]
                             89    90    91    92    98   101   115 
E_COST               573  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            574   576   578 
F                    630  File Variable Aligned Parameter                       [ Loc @DSA+'08'x(12) ]
                            631 
F                    658  File Variable Aligned Parameter                       [ Loc @DSA+'08'x(12) ]
                            660   661   662   664   665   666 
F                    674  File Variable Aligned Parameter                       [ Loc @DSA+'08'x(12) ]
                            677   680   683   704   705   708   724   728   729   733 
                            743   744   745   750   765   767   771   776   778   783 
FUNCTION_ORDER        30  Fixed Bin(15,0) Aligned                               [ DSA-'18EE'x(2) ]
                            401   602   683   693 
GET_INPUT_LIST       173  Entry                                                 [ Code+'0A16'x ]
                            232 
I                     75  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                             92    94    95    96   101 
I                    171  Fixed Bin(15,0) Aligned                               [ DSA-'44'x(2) ]
                            242   243   244   259   260   261 
I                    285  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            290   291   293   298 
I                    548  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            550   551   553   555   560 
ILLEGAL_ENTRY        176  Bit(1) Aligned                                        [ DSA-'45'x(1) ]
                            179   205   207 
INDEX                 27  Builtin
                            187   188 
INEPI_SUM             36  (3000) Bit(96) Aligned                                [ DSA-'A590'x(12) ]
                            440   458   460   470   471   472   504   522   525   526 
                            530   551   554   555   591   770 
INPUT_ITEM           175  Char(30) Var                                          [ DSA-'44'x(32) ]
                            185   186   187   188   192   195   196   197 
IRREDUNDANT_NEPI_SUMS
                     414  Entry                                                 [ Code+'2721'x ]
                            610 
I_EQV_J              285  Fixed Bin(15,0) Aligned                               [ DSA-'2A'x(2) ]
                            297   300 
J                     75  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            101   102   104   105   106   110   111   112   113 
J                    285  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            291   293 
J                    548  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            553   554   555 
L                    397  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            401 
L                    691  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            693 
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                  Symbol Table and Cross-Reference Listing                              Page 24    
LENGTH                27  Builtin
                            195 
LITERALS             397  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            400   402 
LITERALS             690  Entry                                                 [ Code+'4CBA'x ]
                            708 
LITS                 691  Char(10) Var                                          [ DSA-'30'x(12) ]
                            692   695   696   697   700 
LOG2                  27  Builtin
                            602 
LOWER                174  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            197   198   199 
M                    147  Fixed Bin(15,0) Aligned                               [ DSA-'42'x(2) ]
                            151   152 
M                    285  Fixed Bin(15,0) Aligned                               [ DSA-'30'x(2) ]
                            298   301   302   303 
M                    331  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            333   335 
M                    346  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            351   354   363   364   365   366   367   376   377   378 
M                    415  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            421   422   427   446   452 
M                    723  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            729   733 
MENU                 825  Label                                                 [ Code+'67AB'x ]
                            832   844   855   860 
MENU_ITEM            147  Char(30) Var                                          [ DSA-'40'x(32) ]
                            149   150   151 
MENU_SELECTION       146  Entry                                                 [ Code+'0744'x ]
                            828 
MIN                   27  Builtin
                            729   733 
MINIMUM_COST_SOLUTION
                     488  Entry                                                 [ Code+'31A5'x ]
                            611 
MINS_PER_BLOCK       723  Fixed Bin(15,0) Aligned                               [ DSA-'2A'x(2) ]
                            726   729   733 
MINTERM               30  (512) Fixed Bin(15,0) Aligned                         [ DSA-'042C'x(2) ]
                             79   126   235   243   244   335   662   729 
MIN_COST             489  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            497   499   503 
NEW_DATA              34  Bit(1) Static                                         [ BSS+'01'x(1) ]
                            267   820   838   841   847 
NE_COST              587  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            589   591   594 
NE_PI                 30  (96) Fixed Bin(15,0) Aligned                          [ DSA-'18EC'x(2) ]
                            385   427   535   536   591   771 
NONESSENTIAL_COST    586  Entry                                                 [ Code+'3C5C'x ]
                            494   615 
NUM_BLOCKS           723  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            725   726   727 
NUM_COVERS           346  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            352   356   359   362   368   373 
NUM_DONT_CARES        30  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                             82    86   122   129   130   229   252   254   259   665 
                            666   819 
NUM_INEPI_SUMS        30  Fixed Bin(15,0) Aligned                               [ DSA-'2C'x(2) ]
                            435   440   456   458   466   469   470   493   498   502 
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                  Symbol Table and Cross-Reference Listing                              Page 25    
                            524   529   550   553   560   766 
NUM_MINTERMS          30  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                             78    83    84    86   122   125   126   229   235   237 
                            242   333   351   363   373   376   421   661   662   714 
                            725   726   729   733   756   819 
NUM_NE_PIS            30  Fixed Bin(15,0) Aligned                               [ DSA-'2A'x(2) ]
                            382   385   426   436   450   534   590   769 
NUM_PIS               30  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            289   309   315   316   317   334   349   353   365   377 
                            383   398   575   707   732   748   758 
NUM_TERMS             30  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                             86    92    95    96    97   112   113   114   123   178 
                            190   191   192   199   200   201   234   237   240   251 
                            254   257   267   290   291   602   819   835 
NUM_UMIN_NEPIS       415  Fixed Bin(15,0) Aligned                               [ DSA-'2A'x(2) ]
                            420   423   424   428   446 
OR                   742  Char(2) Var                                           [ DSA-'28'x(4) ]
                            747   750   751   765   768   771   772 
OUTPUT_RESULTS       673  Entry                                                 [ Code+'49A0'x ]
                            840   849 
P                    285  Fixed Bin(15,0) Aligned                               [ DSA-'2E'x(2) ]
                            309   310   311   312 
P                    331  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            334   335 
P                    346  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            349   353   354   355   365   366   377   378   383   384 
                            385 
P                    397  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            398   399   400   402 
P                    415  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            426   427   436   450 
P                    573  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            575   576 
P                    587  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            590   591 
P                    687  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                            688 
P                    691  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                            694   695 
P                    703  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            707   708 
P                    723  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            732   733 
P                    742  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            748   749   750   758   759   760   769   771 
PI_COVERS_MINTERM     34  (256,256) Bit(1) Static                               [ BSS+'22'x.0(0.1) ]
                            335   354   366   378   427   733   760 
PI_STATUS             40  (5) Char(30) Var Static Init()                        [ Static+'76'x(32) ]
                            708 
PRIME_IMPLICANTS     283  Entry                                                 [ Code+'1AAA'x ]
                            604 
PRINT_HEADER_MESSAGE
                     629  Entry                                                 [ Code+'4189'x ]
                            213   640   677 
PRINT_INFORMATION    791  Entry                                                 [ Code+'646E'x ]
                            858 
PRINT_INPUT_DATA     657  Entry                                                 [ Code+'4549'x ]
                            214   680 
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                  Symbol Table and Cross-Reference Listing                              Page 26    
PRINT_MENU           639  Entry                                                 [ Code+'429C'x ]
                            827 
P_I                   30  (4,256) Fixed Bin(15,0) Aligned                       [ DSA-'182C'x(2) ]
                            310   311   312   316   317   335   349   359   366   378 
                            384   399   400   402   535   536   576   591   688   694 
                            695   708   733   749   759 
P_I_CHART            330  Entry                                                 [ Code+'1E69'x ]
                            605 
P_I_COST             396  Entry                                                 [ Code+'2583'x ]
                            607 
P_I_STATUS           345  Entry                                                 [ Code+'203C'x ]
                            606 
REDUNDANT_SUMS       417  Bit(1) Aligned                                        [ DSA-'0C37'x(1) ]
                            468   473   478 
REDUNDANT_SUMS       490  Bit(1) Aligned                                        [ DSA-'07F5'x(1) ]
                            505   508 
RED_PIS              518  Bit(96) Aligned                                       [ DSA-'38'x(12) ]
                            523   526   536 
REMOVE_REDUNDANT_SUMS
                     547  Entry                                                 [ Code+'39A2'x ]
                            478   508 
RESULTS_FILE          42  File Aligned External                                 [ Ext+'00'x(12) ]
                            848   849   850   851 
RUN_MINIMISATION     601  Entry                                                 [ Code+'3E79'x ]
                            838 
S                    415  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            456   458   460   469   470   471 
S                    489  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            493   494   498   499   502   503   504 
S                    519  Fixed Bin(15,0) Aligned                               [ DSA-'46'x(2) ]
                            524   525   526   529   530   534   535   536 
S                    587  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                            591 
S                    742  Fixed Bin(15,0) Aligned                               [ DSA-'24'x(2) ]
                            756   760   766   770 
SOLUTION_COST         30  Fixed Bin(15,0) Aligned                               [ DSA-'18F0'x(2) ]
                            614   615   783 
SORTED                75  Bit(1) Aligned                                        [ DSA-'28'x(1) ]
                             91    92   100   102   107 
SORT_DATA             74  Entry                                                 [ Code+'01F4'x ]
                            212 
SUBSTR                27  Builtin
                             66   196   197   429   442   463   537   592   774 
SUM_COST             489  (1000) Fixed Bin(15,0) Aligned                        [ DSA-'07F4'x(2) ]
                            494   497   499   503 
SUM_MOVED            548  Bit(1) Aligned                                        [ DSA-'25'x(1) ]
                            552   553   556   559 
SYSIN                 24  File Aligned External                                 [ Ext+'00'x(12) ]
                            149   163   185   224 
SYSPRINT              25  File Aligned External Print                           [ Ext+'00'x(12) ]
                            162   180   207   211   213   214   215   603   609   640 
                            641   642   792   825   836   839   840   852   854 
T                     75  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                             78    79    80    82    83    84   105   123   124   126 
                            130 
T                    171  Fixed Bin(15,0) Aligned                               [ DSA-'46'x(2) ]
                            188   189   195   196   197   198   199   201   234   235 
                            240   243   251   252   257   260 
Jul 27, 2024  01:55                                       /*                                                            
1.3.0                                  Symbol Table and Cross-Reference Listing                              Page 27    
T                    658  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            662   666 
TERM                  30  (1024) Fixed Bin(15,0) Aligned                        [ DSA-'102C'x(2) ]
                             79    83    94    95   102   104   105   110   112   126 
                            130   192   201   235   243   252   260   293   301   302 
                            602 
TERM_I               285  Fixed Bin(15,0) Aligned                               [ DSA-'26'x(2) ]
                            293   295   297   299   300   311   316 
TERM_J               285  Fixed Bin(15,0) Aligned                               [ DSA-'28'x(2) ]
                            293   295   297   299   310   312   317 
TICK                 717  Entry                                                 [ Code+'5380'x ]
                            733 
TRANSLATE             27  Builtin
                            186   225 
TRIM                  64  Entry                                                 [ Code+'C9'x ]
                            662   666   683   688   750   771   783 
TYPE                  75  (512) Bit(1) Aligned                                  [ DSA-'0229'x(1) ]
                             80    84    96   106   111   113   124 
UMIN_NEPIS           416  (256) Bit(96) Aligned                                 [ DSA-'0C36'x(12) ]
                            424   428   438   452 
UNIQUE_SOLUTION       34  Bit(1) Static                                         [ BSS+'00'x(1) ]
                            373   375   608   615   743   756 
UPPER                174  Fixed Bin(15,0) Aligned                               [ DSA-'22'x(2) ]
                            196   198   199 
VALUE                 65  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                             66 
VERIFY                27  Builtin
                             66   150   187   223 
VERSION               38  Char(4) Static Init()                                 [ Static+'72'x(4) ]
                            631 
VERTEX               285  Fixed Bin(15,0) Aligned                               [ DSA-'2C'x(2) ]
                            299   300   301   302 
X                     56  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'08'x(2) ]
                             57 
Y                     56  Fixed Bin(15,0) Aligned Parameter                     [ Loc @DSA+'0C'x(2) ]
                             57 

End of compilation. 
